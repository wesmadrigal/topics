{"total_words": 1600, "documents": ["A well-defined software process is critical for success in software projects. Software process tailoring refers to the activity of tuning a standardized process to meet the needs of a specific project. We conducted two case studies that address the research question: How is a software process tailored to suit its context? This study identifies process tailoring as a key mechanism to address the challenges faced by a project and develops a model that describes how a process is tailored to resolve these challenges. The model identifies a set of environmental factors, challenges, project goals, process tailoring strategies, and their influences on each other. Specifically, the findings demonstrate the duality of the software process, showing how the project context (i. e., project goals, environmental factors, and challenges) and tailoring decisions dynamically interact with each other and construct the context in which the project is developed and the process is tailored.\n      </p>", "Illegal copying of computer software, usually called software piracy, is a prevalent and serious problem. Some researchers attribute the widespread incidence of software piracy to people's attitudes toward piracy behavior and peer norms. However, current literature leaves unanswered a fundamental question of why individuals pirate software. The objective of this paper is to identify the underlying reasons why individuals pirate software. We also identify what motivates individuals to purchase software as opposed to pirating it. Understanding why individuals purchase and pirate software has clear value for policy makers to develop effective measures to curb the software piracy problem.\n      </p>", "Introducing multiple editions of the same software is a relatively recent innovation in the software market. The editions serve to differentiate among different user segments. Introduction of similar low-and high-end products in other markets has been analyzed using segmentation theory. However, the software market is fundamentally different from other product markets in two respects: (1) Software is characterized by negligible marginal production cost, and (2) the option of offering Upgrades also exists. We analyze the problem of software introduction using segmentation theory. Our analysis shows that if cannibalization is low, the vendor should introduce the full software as one edition. This resuit differs from that obtained in prior research, which showed that the seller should introduce two distinct products in such cases. When cannibalization is high, introducing multiple editions simultaneously is optimal under a variety of conditions. The strategy of introducing a highend edition in the first period followed by the low-end edition in the second period is optimal only when the consumers are extremely impatient and the software is large. A significant resuit of our analysis is that offering Upgrades is clearly superior to other strategies only in a very restricted range of parameters. Our analysis also suggests that the vendor's profit is higher when it announces the future strategy. Our theoretical results are supported by evidence from the software market.\n      </p>", "One of the major difficulties in Controlling software development project cost overruns and schedule delays has been developing practical and accurate software cost models. Software development could be modeled as an economic production process and we therefore propose a theoretical approach to software cost modeling. Specifically, we pr\u00e9sent the Minimum Software Cost Model (MSCM), derived from economic production theory and Systems optimization. The MSCM model is compared with other widely used software cost models, such as COCOMO and SLIM, on the basis of goodness of fit and quality of estimation using software project data sets available in the literature. Judged by both criteria, the MSCM model is comparable to, if not better than, the SLIM, and significantly better than the rest of the modeis. In addition, the MSCM model provides some insights about th\u00e8 behavior of software development processes and environment, which could be used to formulate guidelines for better software project management polices and practices.\n      </p>", "Microcomputer users are faced with an increasingly difficult choice problem in the evaluation and selection of software packages. For many reasons, users frequently must rely on expert evaluations of the technical functions and features of packages. This paper explores the extent to which multi-attribute choice models are capable of extracting the information content of performance ratings. Five choice models are applied to the expert ratings of software packages in the following areas: word processing, database management systems, and spreadsheet and financial planning. The evaluations and selections made under each model are compared for each software type, and guidelines are suggested for choosing between choice strategies for software evaluation.\n      </p>", "Firms developing software face increasing pressures to improve project outcomes in terms of product quality, productivity, time to market, and customer satisfaction. As projects expand in size and complexity, and competition grows, firms are reengineering their software processes. They are adopting more intensive procedures for requirements management, project planning, defect tracking, configuration management, design and code inspections, and so forth. To assess the effectiveness of these efforts, we conducted a survey of senior practitioners at the 1993 Software Engineering Process Group National Meeting. The survey asked participants about the processes followed on, and the outcome of, a specific software project. Certain practices\u2014notably project planning and cross-functional teams\u2014were consistently associated with favorable outcomes. Based on the survey results, other practices may have little impact on project outcomes.\n      </p>", "Software reuse is the use of software resources from all stages of the software development process in new applications. Given the high cost and difficulty of developing high-quality software, the idea of capitalizing on previous software investments is appealing. However, software reuse has not been as effective as expected and has not been very broadly or systematically used in industry. This paper surveys recent software-reuse research using a framework that helps identify and organize the many factors that must be considered to achieve the benefits of software reuse in practice. We argue that software reuse needs to be viewed in the context of a total systems approach that addresses a broad range of technical, economic, managerial, organizational, and legal issues and conclude with a summary of the major research issues in each of these areas.\n      </p>", "This paper analyzes a software market consisting of a freely available open source software (OSS), the commercial version of this OSS (OSS-SS), and the competing commercial proprietary software (PS). We find that in software markets characterized by low direct network benefits, the PS vendor is better off in the presence of competition from OSS-SS. Furthermore, the OSS-SS vendor in these markets is better off by having lower usability than PS. Therefore, the PS vendor has little incentive to improve the usability of their software in these markets. On the other hand, in software markets characterized by high network benefits, a PS vendor is threatened by the presence of OSS-SS and can survive only if the PS is more usable than the competing OSS-SS.\n      </p>", "Despite the introduction and use of a wide variety of system development methods and tools, software projects are still plagued by time and cost overruns, and unmet user requirements. To avoid these problems, it is frequently recommended that the risk associated with a software project be managed. A task that is critical to the proper management of software development risk is the assessment of the risks facing the project. Based on previous research, this paper proposes a definition and a measure of software development risk. Subsequently, data collected in a survey of 120 projects is used to assess the reliability and validity of the instrument.\n      </p>", "Drawing both from the IS literature on software project risk management and the contingency research in Organization Theory literature, the present study develops an integrative contingency model of software project risk management. Adopting a profile deviation perspective of fit, the outcome of a software development project (Performance) is hypothesized to be influenced by the fit between the project's risk (Risk Exposure) and how project risk is managed (Risk Management Profile). The research model was tested with longitudinal data obtained from project leaders and key users of 75 software projects. The results support the contingency model proposed and suggest that in order to increase project performance a project's risk management profile needs to vary according to the project's risk exposure. Specifically, high-risk projects were found to call for high information processing capacity approaches in their management. However, the most appropriate management approach was found to depend on the performance criterion used. When meeting project budgets was the performance criterion, successful high-risk projects had high levels of internal integration, as well as high levels of formal planning. When system quality was the performance criterion, successful high-risk projects had high levels of user participation.\n      </p>", "Software maintenance claims a large proportion of organizational resources. It is thought that many maintenance problems derive from inadequate software design and development practices. Poor design choices can result in complex software that is costly to support and difficult to change. However, it is difficult to assess the actual maintenance performance effects of software development practices because their impact is realized over the software life cycle. To estimate the impact of development activities in a more practical time frame, this research develops a two-stage model in which software complexity is a key intermediate variable that links design and development decisions to their downstream effects on software maintenance. The research analyzes data collected from a national mass merchandising retailer on 29 software enhancement projects and 23 software applications in a large IBM COBOL environment. Results indicate that the use of a code generator in development is associated with increased software complexity and software enhancement project effort. The use of packaged software is associated with decreased software complexity and software enhancement effort. These results suggest an important link between software development practices and maintenance performance.\n      </p>", "The article reports findings of a study conducted to explore the cognitive moral logics used for considering software piracy as ethical or unethical. Since the objective was to elicit the moral logics from the respondents, semi-structured in-depth interviews of 38 software professionals of India were conducted. The content of the interviews was analyzed using the grounded theory framework which does not begin with constructs and their interlinkages and then seek proof instead it begins with an area of study and allows them to emerge from that area of study. Given the objective of exploring moral logics, grounded theory seemed an appropriate choice. Results revealed that 21 respondents considered software piracy unethical whereas 17 did not. Though economic reasons formed the most fundamental logic in both the cases, an overall analysis revealed that the respondents mostly used moral justification (neutralization) for not considering software piracy unethical whereas those considering it unethical used normative (principled) logics. The interconnections among logics are analyzed and results are discussed along with the limitations of the study.\n      </p>", "This statistical computing software review is a continuation of one that appeared in the August 2002 issue of The American Statistician. Three statistical software packages that are devoted completely or partly to analyzing categorical data using exact methods were evaluated in that review. This review evaluates the Windows versions of two additional statistical software packages used for these purposes: Testimate and SAS. The software is examined according to the same criteria that were used in the prior review. Recommendations regarding the software are provided. This review concludes with a comparison of all five statistical software packages (StatXact, LogXact, Stata, Testimate, and SAS).\n      </p>", "We describe a software library that we have developed to teach biophysics and physiology to undergraduate engineering and science students as well as to medical students. The library, which is under development, now includes software on: (1) the Hodgkin-Huxley model for excitation of action potentials in electrically excitable cells (such as nerve and muscle cells); (2) a random-walk model of diffusion; (3) single voltage-gated ion channels; (4) steady-state chemically mediated transport; and (5) macroscopic diffusion processes. The software is used in a variety of ways: as an integral part of lectures, as the basis of special sessions held in electronic classrooms, as a source of homework assignments, and for special projects defined by the students. We describe the software and some of the pedagogic methods we have used.\n      </p>", "This paper describes an approach to application software development (the Application Software Factory) that enables over 90 percent reuse of code, produces application code where quality is measured in defects per million lines of code, and generates productivity exceeding that of interpretative 4GL environments. The environment is built on top of a commercial CASE tool and does not rely on exotic technology. The delivered systems are COBOL transaction processing systems using relational database technology and are predominantly online. Two applications of approximately 200,000 lines of code have each been developed by teams at two different sites. A third application of over 2 million lines of code is nearing completion. The paper depicts the important relationships between technology, management, methods, and design approaches that comprise the Application Software Factory.\n      </p>", "Digital products are now widely traded over the Internet. Many researchers have started to investigate the optimal competitive strategies and market environments for such products. This paper studies the competitive decisions made about software, a major class of digital products that can be easily sold through computer networks. Instead of focusing on traditional competitive dimensions, such as price or quantity, we study the number of functions that should be incorporated into the software. Using game theoretic analysis, we show that there is no fixed strategy that is optimal for software developers in a duopoly market with one-stage simultaneous moves. This happens because, given one developer's decision, there is always an incentive for the other developer to deviate and achieve higher payoffs. Nevertheless, a unique reactive equilibrium does emerge if we consider the two-stage variation of the model, where the two developers both enjoy substantial profits by serving different segments of the market. Essentially, the first mover commits himself to a certain functionality level that induces a rational follower to target his software to the (previously) unattended segment. We discuss our results in light of scale economies in the software development process and market segmentation.\n      </p>", "In contrast to the much-studied role of capital markets in fostering convergence in corporate governance practices worldwide, we argue that the globalization of product and talent markets has affected corporate governance of firms in the Indian software industry. We model several possible reasons why a particular firm, Infosys, has emerged as the exemplar of good corporate governance in India, traditionally a backwater of corporate governance practices. We further analyze the manner in which Infosys has attempted to shape corporate governance practices in India more generally, and why these attempts have had limited effects thus far.\n      </p>", "Software maintenance continues to be one of the most complex problems facing much of the software industry. This study examines EDP professionals' perceptions of what makes software maintainable. Perceptions were assessed through a series of factor analyses on the data collected from a survey of 149 professionals from 20 organizations of varying sizes. The respondents were asked to rate the relative importance of various features which contribute to the ease of maintenance. Results showed that EDP professionals do not share a common perception of software maintainability: software project managers have different perceptions of what contributes to the ease of maintenance than those who are directly involved in maintenance operations. If those who manage and those who actually maintain software do not, in fact, agree on the importance of maintenance factors, then the maintenance problem is much more complex than EDP professionals or software engineers might have originally thought. Perhaps this is the reason why, according to the survey, EDP professionals are less than optimistic in general about the ability of state-of-the-art approaches to solve the problems of software maintenance.\n      </p>", "Theft of software and other intellectual property has become one of the most visible problems in computing today. This paper details the development and empirical validation of a model of software piracy by individuals in the workplace. The model was developed from the results of prior research into software piracy, and the reference disciplines of the theory of planned behavior, expected utility theory, and deterrence theory. A survey of 201 respondents was used to test the model. The results indicate that individual attitudes, subjective norms, and perceived behavioral control are significant precursors to the intention to illegally copy software. In addition, punishment severity, punishment certainty, and software cost have direct effects on the individual's attitude toward software piracy, whereas punishment certainty has a significant effect on perceived behavioral control. Consequently, strategies to reduce software piracy should focus on these factors. The results add to a growing stream of information systems research into illegal software copying behavior and have significant implications for organizations and industry groups aiming to reduce software piracy.\n      </p>", "I investigate the impact of implementing SFAS No. 86, which provides an exception to the GAAP requirement of the immediate expensing of research and development (R&amp;D), on information asymmetry. Using bid-ask spread and share turnover as proxies for information asymmetry, I find that after the introduction of SFAS No. 86, information asymmetry decreases for software firms relative to that of other high-tech firms. Within the software industry, I find that information asymmetry is significantly lower for firms that capitalize (capitalizers) than for those who expense (expensers) software development costs. Thus, accounting for software development costs per SFAS No. 86 reduces information asymmetry and, consequently, the cost of capital. As well, investors' uncertainty about the future benefits of software development costs is reduced when firms capitalize these costs.\n      </p>", "Software piracy is an instance of unauthorized duplication of information goods where laws and norms are not agreed-upon. This article presents a content analysis of articles from the five highest circulating U.S. newspapers 1989-2004 as evidence of the prevailing social environment surrounding software piracy. The rationales in the news articles are analyzed as evidence of the social and psychological underpinnings of attitudes toward software piracy. An expanded version of Sykes and Matza's (American Sociological Review 22, 664-670, 1957); Zamoon and Curley (Working paper, Kuwait University, Kuwait, 2007) neutralization framework is applied to analyze the content of the articles. We found that rationales condoning piracy showed a more balanced use of neutralization approaches, and less moral intensity toward the behavior. In contrast, rationales condemning piracy mostly promoted the injury aspect of software piracy, and suggested higher moral intensity. The discrepancies have practical implications as a barrier to the ability to connect the two sides of the debate concerning software piracy.\n      </p>", "Many software organizations engage in software process improvement (SPI) initiatives to increase their capability to develop quality solutions at a competitive level. Such efforts, however, are complex and very demanding. A variety of risks makes it difficult to develop and implement new processes. We studied SPI in its organizational context through collaborative practice research (CPR), a particular form of action research. The CPR program involved close collaboration between practitioners and researchers over a three-year period to understand and improve SPI initiatives in four Danish software organizations. The problem of understanding and managing risks in SPI teams emerged in one of the participating organizations and led to this research. We draw upon insights from the literature on SPI and software risk management as well as practical lessons learned from managing SPI risks in the participating software organizations. Our research offers two contributions. First, we contribute to knowledge on SPI by proposing an approach to understand and manage risks in SPI teams. This risk management approach consists of a framework for understanding risk areas and risk resolution strategies within SPI and a related process for managing SPI risks. Second, we contribute to knowledge on risk management within the information systems and software engineering disciplines. We propose an approach to tailor risk management to specific contexts. This approach consists of a framework for understanding and choosing between different forms of risk management and a process to tailor risk management to specific contexts.\n      </p>", "Numerous techniques have been identified to assist EDP auditors in accomplishing audit objectives. Within this realm a major issue of interest is identifying methodologies to monitor the reliability and integrity of production software. This article presents a number of available techniques to audit software, and evaluates each on the basis of development cost, operational cost, appropriate timing of usage, and effectiveness.\n      </p>", "The high development and maintenance costs, and the late delivery experienced by many organizations when developing large software systems is well documented. Modern software practices have evolved to overcome many of the technical difficulties associated with software development. To a large extent, however, the high costs and schedule slippages can be traced to management, not technical, deficiencies. This article develops an approach for managing the software development effort that exploits the benefits of modern software practices in staffing, planning, and controlling software development.\n      </p>", "This article questions the tacit assumption that computer software development is a homogeneous activity across differing tasks. The author proposes that conventional statistics on the performance of MIS software development groups are too often based upon norms and procedures relevant to groups developing systems-oriented software. To evaluate the statement a simple descriptive framework is presented which distinguishes software developmental attributes for MIS from those of other computer software systems. The framework is validated by data from twenty-four organizations and the implications for management of MIS software development are discussed.\n      </p>", "A number of studies have investigated and found a significant relationship among economic wealth, Hofstede's national culture dimensions, and software piracy rates (SPR). No study, however, has examined the relationship between economic wealth, culture, and the fact that national SPRs have been declining steadily since 1994. Using a larger sample than has previously been available (57 countries), we confirm the expected negative relationship between economic wealth, culture (individualism and masculinity) and levels of software piracy. The rate of decline in software piracy, however, is found to be a cultural phenomenon, with two factors (power distance (PDI) and uncertainty avoidance (UAI)) working in opposition. Similar results are found for a subset of 37 relatively poor countries. This suggests that, while the rise in economic wealth seen for most countries should lead to a reduction in software piracy, the rate of decline is determined by cultural factors. Global strategies for dealing with software piracy are discussed.\n      </p>", "In this paper we present the results of our effort estimation analysis of a European Space Agency database consisting of 108 software development projects. We develop and evaluate simple empirical effort estimation models that include only those productivity factors found to be significant for these projects and determine if models based on a multicompany database can be successfully used to make effort estimations within a specific company. This was accomplished by developing company specific effort estimation models based on the significant productivity factors of a particular company and by comparing the results with those from general ESA models on a holdout sample of the company. To our knowledge, no other published research has yet developed and analysed software development effort estimation models in this way. Effort predictions made on a holdout sample of the individual company's projects using general models were less accurate than the company specific model. However, it is likely that in the absence of enough resources and data for a company to develop its own model, the application of general models may be more accurate than the use of guessing and intuition.\n      </p>", "Software testing has emerged as a distinct and critical component in software development. This paper argues that software testing should be conceptualized as a concurrent service throughout the software development process rather than being viewed as a sequential line of responsibility. Testing as a service has two key aspects: (1) a service to developers, and (2) a service to end users. This paper draws from the service quality and SERVQUAL literature to propose a structured measurement tool for testing as a service. Software quality is the most prominent outcome for TESTQUAL. The potential antecedents and outcomes of TESTQUAL are briefly discussed. The implications to research and practice of TESTQUAL are also discussed.\n      </p>", "This study of forty-nine software development groups investigated the effectiveness of ten information channels, linking the software groups to potential information sources about new developments in software methodologies, as a means of facilitating software group innovativeness. While the findings suggest that software group innovativeness can be improved by providing appropriate external information channels, this relationship is contingent on a software group's internal environment. The channels most commonly provided by those organizations participating in the study tended to be those least effective in promoting innovation.\n      </p>", "This research assessed the value of case study methodology in the design of an educational computer simulation. Three sources of knowledge were compared to assess the value of case study: practitioner and programmer knowledge, disciplinary knowledge, and knowledge obtained from a case study of teacher practice. A retrospective analysis revealed that the case study was the source of 16 out of 23 design decisions and therefore was the most significant influence on the design of the simulation. The case study was particularly effective in sensitizing the design team to the classroom context, identifying common and uncommon teacher practices, revealing unexpected dimensions of interactions in the classroom, and generating constructive changes to the design of the simulation. Case studies can significantly enrich the design of educational software and are a promising methodological choice for design teams.\n      </p>", "This paper defines and explores the notion of 'software independence' in voting systems: 'A voting system is software independent if an (undetected) change or error in its software cannot cause an undetectable change or error in an election outcome'. For example, optical scan and some cryptographically based voting systems are software independent. Variations and implications of this definition are explored. It is proposed that software-independent voting systems should be preferred, and software-dependent voting systems should be avoided. An initial version of this paper was prepared for use by the Technical Guidelines Development Committee in their development of the Voluntary Voting System Guidelines, which will specify the requirements that the USA voting systems must meet to receive certification.\n      </p>", "A frequent characterization of open source software is the somewhat outdated, mythical one of a collective of supremely talented software hackers freely volunteering their services to produce uniformly high-quality software. I contend that the open source software phenomenon has metamorphosed into a more mainstream and commercially viable form, which I label as OSS 2.0. I illustrate this transformation using a framework of process and product factors, and discuss how the bazaar metaphor, which up to now has been associated with the open source development process, has actually shifted to become a metaphor better suited to the OSS 2.0 product delivery and support process. Overall the OSS 2.0 phenomenon is significantly different from its free software antecedent. Its emergence accentuates the fundamental alteration of the basic ground rules in the software landscape, signifying the end of the proprietary-driven model that has prevailed for the past 20 years or so. Thus, a clear understanding of the characteristics of the emergent OSS 2.0 phenomenon is required to address key challenges for research and practice.\n      </p>", "Software quality assurance (QA) is a critical function in the successful development and maintenance of software systems. Because the QA activity adds significantly to the cost of developing software, the cost-effectiveness of QA has been a pressing concern to software quality managers. As of yet, though, this concern has not been adequately addressed in the literature. The objective of this article is to investigate the tradeoffs between the economic benefits and costs of QA. A comprehensive system dynamics model of the software development process was developed that serves as an experimentation vehicle for QA policy. One such experiment, involving a NASA software project, is discussed in detail. In this experiment, the level of QA expenditure was found to have a significant impact on the project's total cost. The model was also used to identify the optimal QA expenditure level and its distribution throughout the project's lifecycle.\n      </p>", "The failure probability of a modular software system depends on the reliabilities of the modules and the software operational profile. The software operational profile estimated in the development phase has inherent uncertainty because estimation error is inevitable and the operational profile often changes in the operation phase. The software project manager must take this uncertainty into account, so that the customers will not suffer from an unacceptably large failure probability even when his/her operational profile deviates from the estimated one. In this paper, we formulate and solve three optimizing models for software reliability allocation under an uncertain operational profile. The numerical results indicate that when we take the uncertainty into account, the additional software development cost required is acceptably small.\n      </p>", "Software piracy is a serious problem in the software industry. Software authors and publishing companies lose revenue when pirated software rather than legally purchased software is used. Policy developers are forced to invest time and money into restricting software piracy. Much of the published research literature focuses on software piracy by end-users. However, end-users are only able to copy software once the copy protection has been removed by a 'cracker'. This research aims to explore why, if copy protection is so difficult to remove, do crackers invest their skill and time in this activity instead of more lucrative and legal employment. This study develops a framework of neutralisation, justification and motivation and goes directly to the initial software crackers to determine what motivates their activities. The study first applies this framework in an anonymous online survey of crackers. The study then conducts cognitive interviews with eight crackers to explore and further validate the survey's findings. The study finds the challenge of removing the copy protection from software as the strongest motivation for the actions of crackers. Desire for social participation, while found to be rewarding, was considered unnecessary for crackers to continue their actions. Higher social status was not a motivational factor but was a perceived by-product of cracking. The study also raises areas for future research.\n      </p>", "Over the last three years, there has been a remarkable growth in the number and power of microcomputer-based project management packages and in the size of the market. Our overview of this software includes material from 15 detailed interviews with commercial users, as well as actual applications, software evaluations, and comments on future directions.\n      </p>", "Existing output measurement metrics for cost estimation and development productivity need to be reexamined to determine their performance in computer-aided software engineering (CASE) development environments. This paper critiques and empirically evaluates four approaches to the measurement of outputs. Two of the metrics, raw function counts and function points, are based on the function point analysis methodology pioneered by Albrecht and Gaffney at IBM. The second two, object counts and object points, are based on a new approach\u2014object points analysis\u2014that is introduced here for the first time. The latter metrics are specialized for output measurement in object-based CASE environments that include a centralized object repository. Estimation results for nineteen large-scale CASE projects show that the new metrics have the potential to yield equally accurate, yet easier to obtain estimates than function points-based measures.\n      </p>", "Due to reusability of program code and learning effects in software development, development cost of custom software typically decreases in time and experience. This creates a first-mover advantage to software developers. The paper studies whether the benefits of declining development costs are passed on to buyers in the form of lower prices when developers bid strategically. By using a model of bidding auctions we characterize equilibrium bidding strategies of two software developers. In order to become the first mover and attain future market dominance, developers find it optimal to forgo profits from the first projects. As a result, bid prices (= development cost plus a profit margin to the developer) to the buyers may not necessarily decrease over time, and even if so, not as fast as development cost drops. We also show that bidders expect a higher profit margin from a high-variance project. Thus, if there exist high-variance projects in the future, developers are more likely to submit below-cost bid prices or \"low ball.\"\n      </p>", "This article presents a new model for software reliability characterization using a growth curve formulation that allows model parameters to vary as a function of covariate information. In the software reliability framework, covariates may include such things as the number of lines of code for a product throughout its development cycle and the number of customer licenses sold over the field life of a product. We describe a Bayesian framework for inference and model assessment, using Markov chain Monte Carlo techniques, that allows for incorporation of subjective information about the parameters through the assumed prior distributions. The methods are illustrated using simulated defect data and defect data collected during development for two large commercial software products.\n      </p>", "This paper compares the IBM-PC microcomputer and compatibles against the mainframe computing facilities, and discusses specifically the use of software in the areas of spreadsheets, simulation, forecasting and textbook floppies. A comprehensive set of references is given.\n      </p>", "Multiple-model OR packages (MMORPs) are software packages which incorporate algorithms for the solution of a wide range of OR models. In this paper we consider 15 such packages which are currently available for the IBM-PC. A detailed review of these packages with respect to six common OR models [linear programming, integer programming, assignment, transportation, network analysis (PERT/CPM) and Markov processes] is presented. Criteria for choosing a MMORP are highlighted and a subjective judgement made as to whether each package is worth considering for purchase or not.\n      </p>", "In an attempt to protect their intellectual property and compete effectively in an increasingly dynamic marketplace, software publishers have employed a number of preventive and deterrent controls to counter software piracy. Conventional wisdom suggests that reducing piracy will force consumers to acquire software legitimately, thus increasing firm profits. We develop an analytical model to test the implications of antipiracy measures on publisher profits. Our results suggest that preventive controls decrease profits and deterrent controls can potentially increase profits. Empirical results are also presented that support the proposition on the impact of deterrent controls on the extent of software piracy derived from the analytical model.\n      </p>", "Two sets of software developed for early reading instruction (top rated and best selling) were reviewed and evaluated for gender portrayal of central and secondary characters of the opposite sex. Male central characters were present in 37% of the top-rated computer software and in 63% of the best selling software. Female central characters were observed in 16% of the top-rated software and 11% of the best selling software. The lack of consistency between children's software requires further investigation. In a more positive vein, when central characters and secondary characters of the opposite sex were compared for salient characteristics that could be classified as sex role stereotyping, no differences were observed.\n      </p>", "Over the last three decades, a significant stream of research in organizational behavior has established the importance of goals in regulating human behavior. The precise degree of association between goals and action, however, remains an empirical question since people may, for example, make errors and/or lack the ability to attain their goals. This may be particularly true in dynamically complex task environments, such as the management of software development. To date, goal setting research in the software engineering field has emphasized the development of tools to identify, structure, and measure software development goals. In contrast, there has been little microempirical analysis of how goals affect managerial decision behavior. The current study attempts to address this research problem. It investigated the impact of different project goals on software project planning and resource allocation decisions and, in turn, on project performance. The research question was explored through a role-playing project simulation game in which subjects played the role of software project managers. Two multigoal structures were tested, one for cost/schedule and the other quality/schedule. The cost/schedule group opted for smaller cost adjustments and was more willing to extend the project completion time. The quality/schedule group, on the other hand, acquired a larger staff level in the later stages of the project and allocated a higher percentage of the larger staff level to quality assurance. A cost/schedule goal led to lower cost, while a quality/schedule goal led to higher quality. These findings suggest that given specific software project goals, managers do make planning and resource allocation choices in such a way that will meet those goals. The implications of the results for project management practice and research are discussed.\n      </p>", "Using survey data from 240 US corporations, we evaluated practitioners' use and satisfaction with forecasting software and its performance. Despite the many commercial forecasting software packages, only 10.8 percent of the respondents reported using them. Forty-eight percent reported using spreadsheets to make forecasts. Sixt percent reported being dissatisfied with forecasting software. However, we found that those who used commercial forecasting software packages had the best forecast performance, as measured by mean absolute percentage error (MAPE). Those using commercially available packages had errors 6.7 percent lower than those using spreadsheets and 17.2 percent lower than those who used no program. Also, they were more satisfied with their software than those using spreadsheets. In fact, users of forecasting software programs reported a 12.2 percent reduction in forecast error. We found that 61 percent of respondents routinely adjusted forecasts produced by software based on their judgment. Roughly 85 percent of respondents considered ease of use and easily understandable results the most important software features.\n      </p>", "SAS develops software for building Web-based applications for data management, statistical analysis, forecasting, data mining, and operations research. Our customers have used these tools to build several kinds of Web-based decision-support applications. A Web-based optimization framework is used to solve a large-scale production-and-distribution problem at United Sugars Corporation, to solve an inventory replenishment problem at Cameron and Barkley, and to find optimal portfolios of suppliers using Dun and Bradstreet data. Applications implemented at Dow Corning and the Aeronautics Division of Lockheed Martin make statistical-process-control and project-management data available via the Web. We conclude with a discussion of Web mining and some of its challenges.\n      </p>", "Software contracting is a multi-faceted issue that involves legal, economic, managerial and technological considerations. To better understand the economic aspect of software contracting, this paper provides a summary review of software development contracts, followed by a game-theoretic model developed to incorporate incentive and information issues associated with software contracting. In the model an outside contractor is hired to develop a software system over multiple periods. Due to the uncertainties about costs or technology, the developer faces the risk of having to abandon the project at an intermediate phase. The user is better informed of the benefit of the system, while the developer privately discovers the development costs as the project advances. Given the limited information, the contracting parties make decisions in their own interest, leaving each party vulnerable to the other's opportunistic behavior. In this setting, we construct a viable contract that aligns the incentives of the contracting parties and produces the same equilibrium outcome as in in-house development. We also relate the implications of the model to the actual contract cases.\n      </p>", "The information technology (IT) industry is characterized by rapid innovation and intense competition. To survive, IT firms must develop high quality software products on time and at low cost. A key issue is whether high levels of quality can be achieved without adversely impacting cycle time and effort. Conventional beliefs hold that processes to improve software quality can be implemented only at the expense of longer cycle times and greater development effort. However, an alternate view is that quality improvement, faster cycle time, and effort reduction can be simultaneously attained by reducing defects and rework. In this study, we empirically investigate the relationship between process maturity, quality, cycle time, and effort for the development of 30 software products by a major IT firm. We find that higher levels of process maturity as assessed by the Software Engineering Institute's Capability Maturity Model&lt;sup&gt;TM&lt;/sup&gt; are associated with higher product quality, but also with increases in development effort. However, our findings indicate that the reductions in cycle time and effort due to improved quality outweigh the increases from achieving higher levels of process maturity. Thus, the net effect of process maturity is reduced cycle time and development effort.\n      </p>", "This paper focuses on cross-cultural software production and use, which is increasingly common in today's more globalized world. A theoretical basis for analysis is developed, using concepts drawn from structuration theory. The theory is illustrated using two cross-cultural case studies. It is argued that structurational analysis provides a deeper examination of cross-cultural working and IS than is found in the current literature, which is dominated by Hofstede-type studies. In particular, the theoretical approach can be used to analyze cross-cultural conflict and contradiction, cultural heterogeneity, detailed work patterns, and the dynamic nature of culture. The paper contributes to the growing body of literature that emphasizes the essential role of cross-cultural understanding in contemporary society.\n      </p>", "We address the case where a user contracts for the delivery of a new information system from an independent vendor, both of whom are risk-neutral. The delivery task is partitioned into two consecutive stages: system design and software development The parties can contract for each stage separately or specify an initial contract that covers both stages. We compare the impact of different contracting structures on prices, project value, project completion probability, and the value to the developer of obtaining the first stage of the contract. Specifically, we show that a two-stage contracting can lead to a higher business value than stage-by-stage contracting. When there is competition for the design stage, the vendors bear more of the software development risk, and the probability the system will be completed depends on the contract structure.\n      </p>", "The community of statisticians and statistics educators should take responsibility for the evaluation and improvement of software quality from the perspective of education. The paper will develop a perspective, an ideal system of requirements to critically evaluate existing software and to produce future software more adequate both for learning and doing statistics in introductory courses. Different kinds of tools and microworlds are needed. After discussing general requirements for such programs, a prototypical ideal software system will be presented in detail. It will be illustrated how such a system could be used to construct learning environments and to support elementary data analysis with exploratory working style. /// La communaut\u00e9 des statisticiens et des \u00e9ducateurs en statistique est appel\u00e9e \u00e0 prendre responsabilit\u00e9 pour l'\u00e9valuation et l'am\u00e9lioration de la qualit\u00e9 de la programmerie sous une perspective d'\u00e9ducation. La contribution developpera une telle perspective, un syst\u00e8me id\u00e9al de crit\u00e8res facilitant une \u00e9valuation criticale de la programmerie existante et une production future de programmerie plus apte \u00e0 l'apprentissage et \u00e0 la pratique de la statistique dans des cours d'introduction. Divers types d'outils et de micromondes sont necessaires. La discussion des necessit\u00e9s g\u00e9n\u00e9rales pour ce type de programmerie est suivie d'une pr\u00e9sentation d\u00e9taill\u00e9e d'un syst\u00e8me de programmerie de prototype id\u00e9al, d\u00e9montrant comment un tel syst\u00e8me pourra \u00eatre utilis\u00e9 pour construire des milieux d'apprentissage et pour soutenir une analyse de donn\u00e9es \u00e9l\u00e9mentaire avec un style de travail exploratoire.\n      </p>", "Software maintenance is a major concern for organizations. Productivity gains in software maintenance can enable redeployment of Information Systems resources to other activities. Thus, it is important to understand how software maintenance productivity can be improved. In this study, we investigate the relationship between project size and software maintenance productivity. We explore scale economies in software maintenance by examining a number of software enhancement projects at a large financial services organization. We use Data Envelopment Analysis (DEA) to estimate the functional relationship between maintenance inputs and outputs and employ DEA-based statistical tests to evaluate returns to scale for the projects. Our results indicate the presence of significant scale economies in software maintenance, and are robust to a number of sensitivity checks. For our sample of projects, there is the potential to reduce software maintenance costs 36% by batching smaller modification projects into larger planned releases. We conclude by rationalizing why the software managers at our research site do not take advantage of scale economies in software maintenance. Our analysis considers the opportunity costs of delaying projects to batch them into larger size projects as a potential explanation for the managers' behavior.\n      </p>", "Integrated computer-aided software engineering (ICASE) tools and their effect on software development effort and productivity have gained interest in recent research. This research studies the applicability of function points and technical complexity factor as software development effort estimators for ICASE projects. In addition, the effect of three factors\u2014ICASE tool type, systems development method, and ICASE tool experience\u2014on software development productivity is studied. ICASE-based software projects from Texas Instruments and Electronic Data Systems were used in this empirical research. Function points accounted for 74 to 82 percent of the variance in software development effort. Technical complexity factor, however, had only a small indirect effect on software effort. While software productivity differences between the ICASE tool types could not be confirmed, productivity was significantly higher for the rapid application development method in comparison with the productivity associated with the traditional systems development life cycle method. Higher levels of ICASE tool experience were associated with significant increases in software productivity.\n      </p>", "In this article we introduce the problem of computer software reliability and discuss a probabilistic model for describing the failure of software. We suggest a procedure for estimating the parameters of the model and propose a stopping rule for debugging the software. We apply our procedures to some published data on software failures.\n      </p>", "Seeking to improve software development, many organizations attempt to deploy formalized methodologies. This typically entails substantial behavioral change by software developers away from previous informal practices toward conformance with the methodology. Developers' resistance to such change often results in failure to fully deploy and realize the benefits of the methodology. The present research draws upon theories of intention formation and innovation diffusion to advance knowledge about why developers accept or resist following methodologies. Results from a field study within a large organization indicate that developers' intentions are directly influenced by their perceptions of usefulness, social pressure, compatibility, and organizational mandate. This pattern of intention determinants is quite different from that typically observed in studies of information technology tool adoption, revealing several key differences between the domains of tool versus methodology adoption. Specifically, although organizational mandate had a significant effect on intentions, the strength of its direct influence was the lowest among the four significant constructs, and usefulness, compatibility, and social pressure all influenced intentions directly, above and beyond the effects of organizational mandate. The findings suggest, contrary to popular belief, that an organizational mandate is not sufficient to guarantee use of the methodology in a sustained manner.\n      </p>", "Since the early 1980s, there has been a mounting debate in industry literature and in U.S. government-sponsored reports over the relative performance of software developers in Japan versus those in the United States. This literature is somewhat divided between assertions of Japanese or U.S. superiority in this technology, although many observers in the popular business press continue to insist that the U.S. maintains an overwhelming lead in this technology. However, both sides of the debate have offered evidence that, to date, has been primarily qualitative or based on one or two cases. This paper contributes to the debate in two ways. First, it offers a comprehensive literature review that analyzes existing comparisons of Japanese and U.S. practice in software development and summarizes the major proposed differences in performance. Second, it presents the first set of quantitative data collected from a statistically comparable sample of 24 U.S. and 16 Japanese software-development projects, and uses these data to test propositions from the literature. The analyses indicate that Japanese software projects perform at least as well as their U.S. counterparts in basic measures of productivity, quality (defects), and reuse of software code. The data also make it possible to offer models that explain some of the differences in productivity and quality among projects in both countries.\n      </p>", "The planning and design of computer networks give rise to many location problems. These may be split into those primarily concerned with placement of hardware and those with software. Here, a broad overview of location of software components (programs and data files) is given, together with a brief appraisal of the state-of-the-art for various problems.\n      </p>", "Before software project managers can enhance productivity and satisfaction of the software project team member, the effect of task characteristics, goal orientations, and coordination strategies on design and coding-task outcomes must be understood. A research model, which suggests that task interdependence, goal conflict, and coordination strategies significantly affect productivity and satisfaction associated with software design and coding activities, is presented. Issues such as contingency/design misfit, conflicting contingencies, and the extent of deviation to theoretically prescribed coordination mechanisms applied to contingencies are used to make predictions on productivity and process satisfaction. A 2x2x2 factorial experiment was utilized. Overall, projects characterized by low task interdependence exhibited greater productivity than projects with high task interdependence. Also, in generai, organic coordination was more productive than mechanistic coordination. There was also a significant interaction between task interdependence and coordination strategy. Low goal conflict and organic coordination each lead to greater process satisfaction. Productivity results for the goal conflict manipulation was opposite to the hypothesized direction. Unconflicted contingencies addressed with consistent coordination and partially conflicted contingencies, regardless of the coordination used, exhibited significant gains in productivity. In comparison, unconflicted contingencies with inconsistent coordination and conflicted contingencies, regardless of the coordination applied, resulted in lower productivity. This suggests that there are instances where multiple contingencies, which warrant the use of different coordination strategies, can be adequately addressed with a specifie coordination strategy.\n      </p>", "Models of kinetic phenomena can be written down as differential equations or their implicit or explicit integrated forms, usually with time as the independent variable. Thus we are concerned with change and rates of change of variables of interest. This review considers MLAB, MATLAB, PCNONLIN, SCIENTIST, and S-PLUS in terms of their capabilities to estimate such models. Our examination includes both features and style of the packages considered, but focuses on kinetic modeling rather than a comprehensive review of the software.\n      </p>", "This paper outlines the problems associated with the estimation of variance components in generalizability analyses using analysis of variance software, and discusses the most useful software currently available for this specialist application: the MIVQUE method of the SAS procedure VARCOMP.\n      </p>", "We study the determinants of contract choice in offshore software development projects and examine how the choice of contract and other factors in the project affect project profits accruing to the software vendor. Using data collected on 93 offshore projects from a leading Indian software vendor, we provide evidence that specific vendor-, client-, and project-related characteristics such as requirement uncertainty, project team size, and resource shortage significantly explain contract choice in these projects. Our analysis suggests that contract choice significantly determines project profit. Additionally, some ex ante vendor-, client-, and project-related characteristics known at the time of choosing the contract continue to significantly influence project profits after controlling for contract choice. We also provide evidence to show that project duration and team size affect project profits.\n      </p>", "Software reusability has been viewed as one of the major opportunity areas for improving software productivity. An overview of software reusability research suggests that the traditional approach to software development is inappropriate for the development of reusable software parts. An organizational strategy for making software reusability practical is needed. An asset-based systems development method, based on this strategy, focuses on the development of information assets designed to be reused. It also facilitates identifying, representing, and classifying information assets.\n      </p>", "This paper describes general curriculum design principles and specific software design implementations resulting from an ongoing collaboration between software designers and programmers, researchers, and a classroom teacher and his students. Research and observations in the classroom setting led to both the emergence of useful learning principles as well as the design of a specific piece of software, E-LabBook. The paper traces the development of the software in the context of the principles that emerged during the design process.\n      </p>", "This paper identifies that Information and Communication Technology (ICT) has a negative effect on software piracy rates in addition to consolidating prior research that economic development and the cultural dimension of individualism also negatively affect piracy rates. Using data for 59 countries from 2000 to 2005, the findings show that economic well-being, individualism and technology development as measured by ICT expenditures explain between 70% and 82% of the variation in software piracy rates during this period. The research results provide important implications for policy makers and business practitioners to help reduce software piracy.\n      </p>", "The existence of product complementarities is especially relevant in network-type industries, such as information technology and communications, where systems of complementary components made by different manufacturers have to be assembled. Relying on the characteristics of software markets and drawing on the economic theory of complementarities, this paper investigates how complementarities create value in mergers and acquisitions between software companies. We introduce and empirically validate the software stack as a structure to measure complementarities. In a sample of mergers and acquisitions, in which either the acquirer or the target is a software firm, we find values of abnormal returns consistent with previous results. However, when we use the concept of stack, we find an inverse curvilinear relationship between abnormal returns and the distance between acquirers and targets in various layers of the stack.\n      </p>", "This article is Part 1 of areview of SPSS 12, SigmaPlot 8.02, and SigmaStat 3.0. Each software package is an SPSS, Inc. product. Part 1 presents, for each package, an overview of the software characteristics, the scope of statistical data management, graphical capabilities, additions and enhancements to earlier versions, and a brief mention of possible problem areas or capability omissions. Part 2 will focus on critical and comparative evaluation.\n      </p>", "Growing competition in the investment banking industry has given rise to increasing demand for high functionality software applications that can be developed in a short period of time. Yet delivering such applications creates a bottleneck in software development activities. This dilemma can be addressed when firms shift to development methods that emphasize software reusability. This article examines the productivity implications of object and repository-based integrated computer-aided software engineering (ICASE) software development in the context of a major investment bank's information systems strategy. The strategy emphasizes software reusability. Our empirical results, based on data from 20 projects that delivered software for the bank's New Trades Processing Architecture (NTPA), indicate an order of magnitude gain in software development productivity and the importance of reuse as a driver in realizing this result. In addition, results are presented on the extent of the learning that occurred over a two-year period after ICASE was introduced, and on the influence of the link between application characteristics and the ICASE tool set in achieving development performance. This work demonstrates the viability of the firm's IS strategy and offers new ideas for code reuse and software development productivity measurement that can be applied in development environments that emphasize reuse.\n      </p>", "The present paper proposes a way of reading telecommunications systems, software protocols and specifications in terms of collective imaginings of mobility. It reports on an ethnographic study of a large software system designed to control telecommunications infrastructure in rural Australia. Drawing on a notion of infrastructural work as involving an imagining of mobility, the paper develops two lines of inquiry. First, it asks how practices of imagining help us to understand the embodied practices and bewildering variety of artefacts circling around the development of a large distributed software system. These practices include the heavy use of citation, the interweaving of different tropes, metaphors and figures through the system, and the role of figures such as 'system' and 'process' in organizing work. Second, the present paper suggests that intensely invested issues in software production such as configurability, scalability, flexibility and distributing process imply that infrastructural design and implementation have a complicated relation to place. Via recent theoretical critiques of ethnography, it asks how notions such as locality and place can encompass mutually contextualizing movements and imaginings of movement.\n      </p>", "This paper describes the results of a survey of members of the American Association for Artificial Intelligence (knowledge engineers) concerning their individual need for growth and their perceptions about their work environment. Responses are compared to those of software engineers whose qualifications are similar to those of knowledge engineers. Comparisons are made on 16 variables. The analysis shows that personnel in the two job categories are quite similar; both have quite high need for growth and therefore need jobs rich in the factors key to motivation. The survey also identified several problems that managers in the artificial intelligence (AI) area need to resolve.\n      </p>", "We present a model of fixing or patching a software problem after the product has been released in the market. Specifically, we model a software firm's trade-off in releasing a buggy product early and investments in fixing it later. Just as the marginal cost of producing software can be effectively zero, so can the marginal cost of repairing multiple copies of defective software by issuing patches. We show that due to the fixed cost nature of investments in patching, a software vendor has incentives to release a buggier product early and patch it later in a larger market. Thus, a software monopolist releases a product with fewer bugs but later than what is socially optimal. We contrast this result with physical good markets where market size does not play any role in quality provision. We also show that for comparable costs, a software monopolist releases the product with more bugs but invests more in post-patching support later than the physical good monopolist.\n      </p>", "Although product development research often focuses on activities prior to product launch, for long-lived, adaptable products like software, development can continue over the entire product life cycle. For managers of these products the challenges are to predict when and how much the products will change and to understand how their development decisions influence the timing and magnitude of future change activities. We develop a two-stage model that relates environmental volatility to product development decisions and product development decisions to software volatility. The model is evaluated using a data archive that captures changes over 20 years to a firm's environment, its managers' development choices, and its software products. In Stage 1 we find that higher environmental volatility leads to greater use of process technology and standard component designs but less team member rotation. Earlier development decisions strongly influence current development choices, especially for product design and process technology. In Stage 2 we find that increased use of standard component designs dampens future software volatility by decreasing the average rate and magnitude of change. Adding new team members increases product enhancements at a faster pace than more intense use of process technology but adds repairs at almost the same rate as enhancements.\n      </p>", "In the recent past, there have been several initiatives by major software companies, such as Microsoft, to lead the industry towards electronic software distribution. In this paper, we use a monopoly pricing model to examine the optimal pricing strategies for 'selling' and 'pay-per-use' licensing of packaged software over the Internet. Traditionally, software distribution included outright sale as well as short/long term renting. With the Internet fast becoming a prevalent mode for disseminating software, a customer can download and use software on a need-by-need basis. For the software vendor, offering the pay-per-use option to the consumer provides for a steady source of revenue and obviates the need for physical distribution, purchasing and inventory management mishaps. We examine the following issues in this paper: (i) what are the extra benefits to the software vendor for providing the pay-per-use option?; and (ii) does the market size change? The contribution of this paper is to show that pay-per-use is a viable alternative for a large number of customers, and that judicious pricing for pay-per-use is profitable for the software vendor.\n      </p>", "Software piracy by users is generally believed to harm both software firms (through lower profits) and buying customers (through higher prices). Thus, it is thought that perfect and costless technological protection would benefit both firms and consumers. The model developed here suggests that in some circumstances, even with significant piracy, not protecting can be the best policy, both raising firm profits and lowering selling prices. Key to the analysis is joining the presence of a positive network externality with the fact that piracy increases the total number of program users. The network externality exists because consumers have an incentive to economize on post-purchase learning and customization costs.\n      </p>", "The use of operational profiles and usage-based testing has received considerable attention recently in the software engineering literature. Testing under the actual operational profile can, however, be expensive, time consuming or even infeasible in situations where the performance of a system is dominated by infrequent but highly critical events. We consider a real application that deals with telecommunications network restoration after network failure caused by cuts in fibre optic cables. We use this application to demonstrate the usefulness of traditional accelerated testing methods to test and estimate software reliability. These methods, which have been extensively used in hardware reliability, have an important role to play in software reliability assessment as well.\n      </p>", "This paper reports on progress in nonlinear programming software since 1979. Developments in the computer industry have had a significant impact on the design of mathematical software and the expectations of users. Microcomputers in particular are changing the software industry to an extent that was not anticipated in the last survey. Continuing refinements in NLP algorithms have enabled users to solve larger and more complicated problems, even some with integer variables. Modeling systems with nonlinear programming capabilities have now become available. Interest and improvements in computational experimentation have increased the rigor and objectivity of studies assessing software quality. This report surveys these important developments and speculates on the future.\n      </p>", "Many software products are available free of charge. While the benefits resulting from network externality have been examined in the related literature, the effect of free offer on the diffusion of new software has not been formally analyzed. We show in this study that even if other benefits do not exist, a software firm can still benefit from giving away fully functioning software. This is due to the accelerated diffusion process and subsequently the increased net present value of future sales. By adapting the Bass diffusion model to capture the impact of free software offer, we provide a methodology to determine the optimal number of free adopters. We show that the optimal free offer solution depends on the discount rate, the length of the demand window, and the ratio of low-valuation to high-valuation free adopters. Our methodology is shown to be applicable for both fixed and dynamic pricing strategies.\n      </p>", "We describe the design and use of a hierarchically-structured autonomous software agent. Algorithms are presented for the three major elements which make up the architecture: a classifier array, a network of sequence learners, and a value module. Learning algorithms are also outlined.\n      </p>", "The impact of effective information flow in software ventures is analyzed through a recent case in which a hot, lucrative technology was lost on its way to the marketplace. The failure occurred despite the fact that the venture had many components crucial to success, including a proprietary intellectual property position, enormous market demand, a well-qualified, committed team, and sufficient funding. One reason for this failure is the lack of information flows among several parties criticai to the success of th\u00e8 venture. This case suggests that in software markets that operate at breakneck pace and h\u00e2ve short development cycles, effective information flow is a first-order priority. These blockages in information flows can stem from the nature of the cultures that are created to produce software ideas, especially proprietary technologies. The case also suggests that information can be affected by the clash between U. S. software market characteristics and Japanese business culture. Fortunately, there are inexpensive solutions that can substantially improve the return on investment, especially foreign investment, in new software technologies.\n      </p>", "We examine the relationship between life-cycle productivity and conformance quality in software products. The effects of product size, personnel capability, software process, usage of tools, and higher front-end investments on productivity and conformance quality were analyzed to derive managerial implications based on primary data collected on commercial software projects from a leading vendor. Our key findings are as follows. First, our results provide evidence for significant increases in life-cycle productivity from improved conformance quality in software products shipped to the customers. Given that the expenditure on computer software has been growing over the last few decades, empirical evidence for cost savings through quality improvement is a significant contribution to the literature. Second, our study identifies several quality drivers in software products. Our findings indicate that higher personnel capability, deployment of resources in initial stages of product development (especially design) and improvements in software development process factors are associated with higher quality products.\n      </p>", "This paper examines the impact of the level of economic development, income inequality, and five cultural variables on the rate of software piracy at the country level. The study finds that software piracy is significantly correlated to GNP per capita, income inequality, and individualism. Implications for anti-piracy programs and suggestions for future research are developed.\n      </p>", "The development of instructional software is a complex process, posing high demands to the technical and didactical expertise of developers. Domain specialists rather than professional developers are often responsible for it, but authoring tools with pre-structured templates claim to compensate for this limited experience. This study compares instructional software products made by developers with low production experience (n = 6) and high production experience (n = 8), working with a template-based authoring tool. It is hypothesized that those with high production experience will be more productive and create software with a higher didactical quality than those with low production experience, whereas no differences with regard to technical and authoring quality are expected. The results show that the didactical quality was unsatisfactory and did not differ between groups. Nevertheless the templates compensated for differences in experience because the technical and authoring quality was equal for both groups, indicating that templates enable domain specialists to participate successfully in the production process.\n      </p>", "This study draws upon theories of task interdependence and organizational inertia to analyze the effect of quality improvement on infrastructure activity costs in software development. Although increasing evidence indicates that quality improvement reduces software development costs, the impact on infrastructure activities is not known. Infrastructure activities include services like computer operations, data integration, and configuration management that support software development. Because infrastructure costs represent a substantial portion of firms' information technology budgets, it is important to identify innovations that yield significant cost savings in infrastructure activities. We evaluate quality and cost data collected in nine infrastructure activity centers over 10 years of product development in a major software firm undergoing a quality transformation. Findings indicate that infrastructure activities do benefit from quality improvement. The greatest marginal cost savings are realized in infrastructure activities that are highly interdependent with development and that occur later in the software development life cycle. Organizational inertia influences the rapidity with which the infrastructure activities benefit from higher product quality, especially for the more specialized activities. Finally, our findings suggest that although the savings in infrastructure from quality improvement are substantial, there are diminishing returns to quality improvement in infrastructure activities.\n      </p>", "This paper addresses the seemingly implausible project of establishing a 'generic' organizational information system. This is an apparent contradiction: on the one hand, we are told of the diversity of specific organizational contexts and on the other, we often find the same standardized software solutions being applied across those settings. How do generic software packages work in so many different contexts? Science and Technology Studies provides contrasting accounts of how this contradiction is resolved: either stressing the unwanted organizational change that standardized systems may bring; or, alternatively, insisting these technologies can only be made to work through processes of 'localization'. We argue that the focus on specificity versus localization of application contexts draws attention away from enquiring into the origins and characteristics of generic solutions. Through comparing the design and evolution of two software packages we shift the debate from understanding how technologies are made to work within particular settings to how they are built to work across a diverse range of organizational contexts. Our question is 'How do software packages achieve the mobility that allows them to bridge the heterogeneity within organizations and between organizations in different sectors and cultures?' We describe a set of revealed strategies through which suppliers produce software that embodies characteristics common across many users; what we term generification work. One aspect of this process of generification is the configuring of users within 'managed communities', but it also includes 'smoothing' the contents of the package and, at times, reverting to 'social authority'. Our argument is that generic systems do exist but that they are brought into being through an intricately managed process, involving the broader extension of a particularized software application and, at the same time, the management of the user community attached to that solution.\n      </p>", "Software is available through a number of different licensing models such as the commonly used perpetual licensing model and a relatively new licensing model called software as a service (SaaS). There are several differences between SaaS and perpetual licensing. SaaS licensing offers software using a subscription model, whereas perpetual licensing involves a one-time payment for a perpetual use license and optional additional payments for future upgrades. Prior literature has not considered the impact of these licensing schemes on the publisher's incentive to invest in software quality. We model differences in how new software features are disseminated in SaaS and perpetual licensing. We show that these differences affect the publisher's incentive to invest in product development. We find that the SaaS licensing model leads to greater investment in product development under most conditions. This increased investment leads to higher software quality in equilibrium under SaaS as compared to perpetual licensing. The software publisher earns greater profits and social welfare is higher under SaaS under these conditions.\n      </p>", "This study attempts to identify customer retention strategies for legal software and discusses their effectiveness for three consumer groups (stayers, dissatisfied switchers, and satisfied switchers). Although previous studies propose several antipirating strategies, they do not discuss how to enhance customer intentions to use legal software, which is crucial for software companies. The authors provide four generic retention strategies developed from both antipiracy and customer loyalty literature. The results indicate lower-pricing, legal, communication, and product strategies all enhance customer purchase intentions toward legal software. The lower-pricing strategy is more useful for stayers and dissatisfied switchers, and the communication strategy is most useful for dissatisfied switchers. Both the legal and product strategies have similar impacts on purchase intentions across the three segments. From a firm perspective, a product strategy is most worthwhile and useful across all segments.\n      </p>", "In this article we investigate how staff turnover, acquisition, and assimilation rates affect software development cost and schedule. A system dynamics model of the software development process is employed as our experimentation vehicle. In addition to permitting less costly and less time-consuming experimentation, simulation-type models can provide useful insights into the causes behind the different behavior patterns observed. Our results indicate that staff turnover, acquisition, and assimilation rates can increase a project's cost and duration by as much as 40 to 60 percent. This suggests that the three staffing variables are indeed critical for the successful development of software systems, as well as for the accurate estimation of software development cost and schedule.\n      </p>", "Over the past four decades, software engineering has emerged as a discipline in its own right, though it has roots both in computer science and in classical engineering. Its philosophical foundations and premises are not yet well understood. In recent times, members of the software engineering community have started to search for such foundations. In particular, the philosophies of Kuhn and Popper have been used by philosophically-minded software engineers in search of a deeper understanding of their discipline. It seems, however, that professional philosophers of science are not yet aware of this new discourse within the field of software engineering. Therefore, this article aims to reflect critically upon recent software engineers' attempts towards a philosophy of software engineering and to introduce our own philosophical thoughts in this context. Finally, we invite the professional philosophers of science to participate in this interesting new discourse.\n      </p>", "This paper explores the application of functional data analysis (FDA) as a means to study the dynamics of software evolution in the open source context. Several challenges in analyzing the data from software projects are discussed, an approach to overcoming those challenges is described, and preliminary results from the analysis of a sample of open source software (OSS) projects are provided. The results demonstrate the utility of FDA for uncovering and categorizing multiple distinct patterns of evolution in the complexity of OSS projects. These results are promising in that they demonstrate some patterns in which the complexity of software decreased as the software grew in size, a particularly novel result. The paper reports preliminary explorations of factors that may be associated with decreasing complexity patterns in these projects. The paper concludes by describing several next steps for this research project as well as some questions for which more sophisticated analytical techniques may be needed.\n      </p>", "This study compares the structural contingency and risk-based perspectives regarding the effects of project coordination and requirements uncertainty on performance dimensions such as process control and product flexibility. The structural contingency perspective suggests that the fit between coordination and requirements uncertainty influences performance, where fit is conceptualized in three ways: mediation, interaction, and profile deviation. The risk-based perspective suggests that performance risk is an alternative mechanism that explains the effect of coordination and uncertainty on process control and product flexibility. A survey methodology based on sixty-four projects from banking and other industries was used to test the two perspectives and their relevant hypotheses. The results suggest lack of support for any of the three approaches to the structural contingency perspective, but some support for the role of software performance risk in explaining performance. In particular, software performance risk seems to mediate the effect of vertical coordination and requirements uncertainty on process control. Horizontal coordination appears to have a direct and unmediated positive effect on product flexibility but is unrelated to either software performance risk or process control. The findings suggest that practitioners could benefit from awareness of the different capabilities provided by the two coordination mechanisms: Vertical coordination enables project managers to bring projects to closure by reducing performance risks and increasing control over the process, whereas horizontal coordination leads to flexible software applications because it allows exploration of ideas and issues.\n      </p>", "Although increasing evidence suggests that superior performance requires alignment between firms' strategies and production processes, it is not known if such alignment is relevant for software development processes. This study breaks new ground by examining how firms align their software processes, products, and strategies in Internet application development. Drawing upon the literatures in strategy, operations management, and information systems, we identify four dimensions that influence alignment: the business unit strategy, the level of product customization, the level of process customization, and the volume of customers. To examine how these dimensions are synchronized, we conducted detailed case studies of Internet application development in nine varied firms including both start-ups and established \"brick and mortar\" companies. Our analyses reveal that the firms in our study do use differing processes for Internet application development, and that many of the firms match their software process choices to product characteristics, customer volume, and business unit strategies. We develop concept maps for the firms that are in alignment to illustrate how managers configure specific product and process dimensions. We also offer potential explanations for why some firms are misaligned, such as attempting to execute incompatible strategies, the lack of coordination between marketing and production strategies, the too rapid expansion of process scope, and inflexible barriers to rapid adaptation of process. Our study contributes detailed insights into how software processes are customized to complement different types of product requirements and strategies.\n      </p>", "This article is a review of the multimedia software package ActivStats for SPSS, a program that teaches introductory statistics concepts and methods using activities that contain narration and animation, video, simulation, and interactive experiments. Using evaluation criteria from the statistics education and instructional technology literature, we consider the usefulness of this software based on a framework of how students learn statistics. Our recommendations about how to best use ActivStats for introductory students as well as limitations of the review conclude the article.\n      </p>", "This article helps to clarify and articulate the ideological, legal, and ethical attitudes regarding software as intellectual property (IP). Computer software can be viewed as IP from both ethical and legal perspectives. The size and growth of the software industry suggest that large profits are possible through the development and sale of software. The rapid growth of the open source movement, fueled by the development of the Linux operating system, suggests another model is possible. The large number of unauthorized copies of software programs suggests that many people do not believe in laws regarding software copyright. There are many and varied views of software as IP, even within the information systems (IS) profession. In this article, four distinct subgroups of IS professionals are identified. The article describes the four subgroups and their respective ideological views on software ownership; it explores the subgroups' attitudes regarding software laws; and finally, it explains the ethical positions embraced by each subgroup.\n      </p>", "An analysis of the opinions of decision makers who select software for business use indicated that a software quality assurance certificate would add value to and confidence in a software product. Marketing research techniques were used to obtain and analyze data from business users of software. Their problems, anxieties, influences on software choice, the value of a certificate in the choice process, and the importance of auditing the various aspects of the software development process were assessed. The findings indicate that such a certificate would benefit users and demonstrate how marketing research techniques can be applied to assess market acceptability. This study used three market segments and proposed two services to cater to their needs.\n      </p>", "This article reviews the JMP statistical software package, with special attention to its accuracy. JMP is an excellent package for exploratory data analysis because of its flexibility and ease of use. Unfortunately, however, JMP is not an accurate tool for nonlinear modeling or for simulation.\n      </p>", "Software preannouncements are often called \"vaporware\" (Systems or features announced long before a ship date). The challenge confronting software vendors and consumers is understanding the balance between th\u00e8 need to inforni the market and th\u00e8 negative cons\u00e9quences of unfulfilled promises. Based on signaling theory from marketing science and research, this study looks at the perceived importance of software preannouncement factors on customers, of unfulfilled promises and unreliable software on a company's r\u00e9putation, and whether vendor dependence changes th\u00e8se perceptions. Database administrators were surveyed on the perceptions of their database software vendor. Fulfilling commitments to software functionality was more strongly correlated with vendor r\u00e9putation than on-time delivery of the software. Customer dependence on the vendor was not correlated with perceptions of vendor r\u00e9putation and credibility. Thus, unlike other industries, it seems that vendors can use software delivery time preannouncements for competitive purposes with minimal concern for the impact on customers, provided the software ultimately delivers the features and fimctionality promised and is largely free of errors.\n      </p>", "This article describes the software developed in the process of creating the Population Health Information System. The software can be applied to a range of administrative data and provides standardized data on the health status and health care use of populations by generating population-based rates of discrete events. The standardized approach permits construction of a comprehensive, comparative picture for residents of defined geographic regions. The addition of a user friendly graphic interface will permit regional planners to do their own data analyses and allow out-of-province researchers to adopt the system for their own uses.\n      </p>", "Testing software before its release is an important stage of the software testing process. We propose a decision theoretic solution to the problem of deciding the optimal length of the testing period. We make use of a well-known error detection model and a sensible utility. Three testing plans are described: the single stage, the two stage and the next fixed time look ahead. A study to compare the performance of the plans shows the relative performance of each plan under a variety of assumptions about the quality of the software to be tested. All the plans are illustrated by using the well-known naval tactical data system data set.\n      </p>", "Centralization and formalization have previously been employed in research designs investigating organizational innovation. The results, however, have been mixed. Three arguments are raised toward explaining this inconsistency. First, innovation is a multi-phased process in which the influence of centralization and formalization could be expected to differ. Second, as innovations may vary with regard to their compatibility to individuals in organizations, the expected influence of centralization and formalization may also vary. Third, organizational innovations may be directed toward particular vested interests, such as the technical or administrative core. Accordingly, the influence of centralization and formalization may also vary. This paper reports on a study which examines the influence of centralization and formalization on organizational innovation given the arguments given above. The effectiveness of employing structural overlays to overcome the conflicting forces often arising between organizational processes and particular organizational behaviors-such as innovative behavior-is investigated as well. Managers of 49 software development groups responded to a questionnaire assessing the influences of centralization and formalization on the initiation, adoption, and implementation of six modern software practices (MSP) within their software groups. Three of the MSP were technical in nature and three were administrative. The technical MSP were viewed as being incompatible to the technical core. Two structural overlays were investigated regarding their ability to improve the diffusion process: the existence of a formal body responsible for identifying MSP and introducing them into the software group; and, the assignment of computer specialists to projects as `set' teams.\n      </p>", "This article describes the relation between the production, distribution, and consumption of children's software, focusing on how genres of \"entertainment\" and \"education\" structure everyday practice; institutions; and our understandings of childhood, play, and learning. Starting with a description of how the vernaculars of popular visual culture and entertainment found their way into children's educational software and how related products are marketed, the article then turns to examples of play with children's software that are drawn from ethnographic fieldwork. The cultural opposition between entertainment and education is a compelling dichotomy-a pair of material, semiotic, technical generes-that manifests in a range of institutionalized relations. After first describing a theoretical commitment to discursive analysis, this article presents the production and marketing context that structures the entertainment genre in children's software and then looks at instance of play in the after-school computer clubs that mobilize entertainment and fun as social resources.\n      </p>", "Eight statistical software packages for general use by nonstatisticians are reviewed. The packages are GraphPad Prism, InStat, ISP, NCSS, SigmaStat, Statistix, Statmost, and Winks. Summary tables of statistical capabilities and \"usability\" features are followed by discussions of each package. Discussions include system requirements, data import capabilities, statistical capabilities, and user interface. Recommendations, based on user needs and sophistication, are presented following the reviews.\n      </p>"], "words": {"all": {"number": 1, "prob": 8.281264880397832e-06}, "code": {"number": 1, "prob": 8.281264880397832e-06}, "evidence": {"number": 1, "prob": 8.281264880397832e-06}, "remarkable": {"number": 1, "prob": 8.281264880397832e-06}, "dynamic": {"number": 1, "prob": 8.281264880397832e-06}, "results": {"number": 2, "prob": 1.6562529760795664e-05}, "existing": {"number": 1, "prob": 8.281264880397832e-06}, "four": {"number": 1, "prob": 8.281264880397832e-06}, "children": {"number": 1, "prob": 8.281264880397832e-06}, "retention": {"number": 1, "prob": 8.281264880397832e-06}, "presents": {"number": 1, "prob": 8.281264880397832e-06}, "to": {"number": 32, "prob": 0.00026500047617273063}, "charge": {"number": 1, "prob": 8.281264880397832e-06}, "program": {"number": 2, "prob": 1.6562529760795664e-05}, "helps": {"number": 1, "prob": 8.281264880397832e-06}, "resources": {"number": 2, "prob": 1.6562529760795664e-05}, "activities": {"number": 2, "prob": 1.6562529760795664e-05}, "risk": {"number": 4, "prob": 3.312505952159133e-05}, "continues": {"number": 1, "prob": 8.281264880397832e-06}, "seemingly": {"number": 1, "prob": 8.281264880397832e-06}, "choice": {"number": 3, "prob": 2.4843794641193497e-05}, "affect": {"number": 2, "prob": 1.6562529760795664e-05}, "believed": {"number": 1, "prob": 8.281264880397832e-06}, "level": {"number": 2, "prob": 1.6562529760795664e-05}, "large": {"number": 2, "prob": 1.6562529760795664e-05}, "team": {"number": 1, "prob": 8.281264880397832e-06}, "enhance": {"number": 1, "prob": 8.281264880397832e-06}, "software,": {"number": 1, "prob": 8.281264880397832e-06}, "findings": {"number": 1, "prob": 8.281264880397832e-06}, "educators": {"number": 1, "prob": 8.281264880397832e-06}, "past": {"number": 1, "prob": 8.281264880397832e-06}, "rate": {"number": 1, "prob": 8.281264880397832e-06}, "cost": {"number": 6, "prob": 4.968758928238699e-05}, "design": {"number": 6, "prob": 4.968758928238699e-05}, "perspective": {"number": 1, "prob": 8.281264880397832e-06}, "investment": {"number": 1, "prob": 8.281264880397832e-06}, "established": {"number": 1, "prob": 8.281264880397832e-06}, "nonlinear": {"number": 1, "prob": 8.281264880397832e-06}, "business": {"number": 1, "prob": 8.281264880397832e-06}, "multimedia": {"number": 1, "prob": 8.281264880397832e-06}, "attitudes": {"number": 1, "prob": 8.281264880397832e-06}, "new": {"number": 4, "prob": 3.312505952159133e-05}, "firms": {"number": 3, "prob": 2.4843794641193497e-05}, "increasing": {"number": 3, "prob": 2.4843794641193497e-05}, "consisting": {"number": 2, "prob": 1.6562529760795664e-05}, "contrast": {"number": 1, "prob": 8.281264880397832e-06}, "specialist": {"number": 1, "prob": 8.281264880397832e-06}, "focuses": {"number": 2, "prob": 1.6562529760795664e-05}, "component": {"number": 1, "prob": 8.281264880397832e-06}, "modular": {"number": 1, "prob": 8.281264880397832e-06}, "explore": {"number": 1, "prob": 8.281264880397832e-06}, "groups": {"number": 1, "prob": 8.281264880397832e-06}, "address": {"number": 1, "prob": 8.281264880397832e-06}, "equations": {"number": 1, "prob": 8.281264880397832e-06}, "physiology": {"number": 1, "prob": 8.281264880397832e-06}, "engage": {"number": 1, "prob": 8.281264880397832e-06}, "ventures": {"number": 1, "prob": 8.281264880397832e-06}, "study": {"number": 8, "prob": 6.625011904318266e-05}, "allows": {"number": 1, "prob": 8.281264880397832e-06}, "reports": {"number": 2, "prob": 1.6562529760795664e-05}, "prior": {"number": 1, "prob": 8.281264880397832e-06}, "products": {"number": 2, "prob": 1.6562529760795664e-05}, "usually": {"number": 2, "prob": 1.6562529760795664e-05}, "articulate": {"number": 1, "prob": 8.281264880397832e-06}, "studies": {"number": 1, "prob": 8.281264880397832e-06}, "tasks": {"number": 1, "prob": 8.281264880397832e-06}, "useful": {"number": 1, "prob": 8.281264880397832e-06}, "addresses": {"number": 1, "prob": 8.281264880397832e-06}, "mobility": {"number": 1, "prob": 8.281264880397832e-06}, "outcomes": {"number": 1, "prob": 8.281264880397832e-06}, "visible": {"number": 1, "prob": 8.281264880397832e-06}, "moral": {"number": 1, "prob": 8.281264880397832e-06}, "licensing": {"number": 2, "prob": 1.6562529760795664e-05}, "operational": {"number": 2, "prob": 1.6562529760795664e-05}, "market": {"number": 3, "prob": 2.4843794641193497e-05}, "use": {"number": 6, "prob": 4.968758928238699e-05}, "from": {"number": 6, "prob": 4.968758928238699e-05}, "indicated": {"number": 1, "prob": 8.281264880397832e-06}, "would": {"number": 1, "prob": 8.281264880397832e-06}, "distinct": {"number": 1, "prob": 8.281264880397832e-06}, "illegal": {"number": 1, "prob": 8.281264880397832e-06}, "objectives": {"number": 1, "prob": 8.281264880397832e-06}, "two": {"number": 1, "prob": 8.281264880397832e-06}, "nonstatisticians": {"number": 1, "prob": 8.281264880397832e-06}, "right,": {"number": 1, "prob": 8.281264880397832e-06}, "today": {"number": 1, "prob": 8.281264880397832e-06}, "researchers,": {"number": 1, "prob": 8.281264880397832e-06}, "introducing": {"number": 1, "prob": 8.281264880397832e-06}, "curriculum": {"number": 1, "prob": 8.281264880397832e-06}, "controlling": {"number": 1, "prob": 8.281264880397832e-06}, "profiles": {"number": 1, "prob": 8.281264880397832e-06}, "effort": {"number": 1, "prob": 8.281264880397832e-06}, "customer": {"number": 2, "prob": 1.6562529760795664e-05}, "organizations": {"number": 4, "prob": 3.312505952159133e-05}, "instructional": {"number": 1, "prob": 8.281264880397832e-06}, "market,": {"number": 1, "prob": 8.281264880397832e-06}, "mythical": {"number": 1, "prob": 8.281264880397832e-06}, "this": {"number": 31, "prob": 0.0002567192112923328}, "science": {"number": 2, "prob": 1.6562529760795664e-05}, "orientations,": {"number": 1, "prob": 8.281264880397832e-06}, "theories": {"number": 1, "prob": 8.281264880397832e-06}, "reviews": {"number": 1, "prob": 8.281264880397832e-06}, "can": {"number": 3, "prob": 2.4843794641193497e-05}, "concepts": {"number": 1, "prob": 8.281264880397832e-06}, "growing": {"number": 1, "prob": 8.281264880397832e-06}, "strategies": {"number": 2, "prob": 1.6562529760795664e-05}, "turnover,": {"number": 1, "prob": 8.281264880397832e-06}, "august": {"number": 1, "prob": 8.281264880397832e-06}, "stream": {"number": 1, "prob": 8.281264880397832e-06}, "give": {"number": 1, "prob": 8.281264880397832e-06}, "process": {"number": 4, "prob": 3.312505952159133e-05}, "implementations": {"number": 1, "prob": 8.281264880397832e-06}, "high": {"number": 4, "prob": 3.312505952159133e-05}, "effectively": {"number": 1, "prob": 8.281264880397832e-06}, "information": {"number": 7, "prob": 5.7968854162784825e-05}, "educational": {"number": 1, "prob": 8.281264880397832e-06}, "requirements": {"number": 1, "prob": 8.281264880397832e-06}, "goal": {"number": 1, "prob": 8.281264880397832e-06}, "statisticians": {"number": 1, "prob": 8.281264880397832e-06}, "american": {"number": 1, "prob": 8.281264880397832e-06}, "how": {"number": 2, "prob": 1.6562529760795664e-05}, "methodology": {"number": 1, "prob": 8.281264880397832e-06}, "offshore": {"number": 1, "prob": 8.281264880397832e-06}, "acquisition,": {"number": 1, "prob": 8.281264880397832e-06}, "profile": {"number": 1, "prob": 8.281264880397832e-06}, "product": {"number": 6, "prob": 4.968758928238699e-05}, "rise": {"number": 2, "prob": 1.6562529760795664e-05}, "explores": {"number": 2, "prob": 1.6562529760795664e-05}, "specifications": {"number": 1, "prob": 8.281264880397832e-06}, "after": {"number": 1, "prob": 8.281264880397832e-06}, "applications": {"number": 2, "prob": 1.6562529760795664e-05}, "produce": {"number": 1, "prob": 8.281264880397832e-06}, "improving": {"number": 1, "prob": 8.281264880397832e-06}, "such": {"number": 2, "prob": 1.6562529760795664e-05}, "data": {"number": 2, "prob": 1.6562529760795664e-05}, "a": {"number": 49, "prob": 0.0004057819791394938}, "short": {"number": 1, "prob": 8.281264880397832e-06}, "attempt": {"number": 2, "prob": 1.6562529760795664e-05}, "effective": {"number": 1, "prob": 8.281264880397832e-06}, "explicit": {"number": 1, "prob": 8.281264880397832e-06}, "responsibility": {"number": 1, "prob": 8.281264880397832e-06}, "preventive": {"number": 1, "prob": 8.281264880397832e-06}, "development,": {"number": 3, "prob": 2.4843794641193497e-05}, "wealth,": {"number": 1, "prob": 8.281264880397832e-06}, "developed": {"number": 4, "prob": 3.312505952159133e-05}, "over": {"number": 4, "prob": 3.312505952159133e-05}, "vary": {"number": 1, "prob": 8.281264880397832e-06}, "paper": {"number": 15, "prob": 0.00012421897320596747}, "through": {"number": 2, "prob": 1.6562529760795664e-05}, "statistical": {"number": 3, "prob": 2.4843794641193497e-05}, "existence": {"number": 1, "prob": 8.281264880397832e-06}, "kinetic": {"number": 1, "prob": 8.281264880397832e-06}, "still": {"number": 1, "prob": 8.281264880397832e-06}, "its": {"number": 4, "prob": 3.312505952159133e-05}, "roots": {"number": 1, "prob": 8.281264880397832e-06}, "before": {"number": 2, "prob": 1.6562529760795664e-05}, "superior": {"number": 1, "prob": 8.281264880397832e-06}, "programmers,": {"number": 1, "prob": 8.281264880397832e-06}, "microcomputer": {"number": 2, "prob": 1.6562529760795664e-05}, "decreases": {"number": 1, "prob": 8.281264880397832e-06}, "late": {"number": 1, "prob": 8.281264880397832e-06}, "systems": {"number": 1, "prob": 8.281264880397832e-06}, "freely": {"number": 2, "prob": 1.6562529760795664e-05}, "designs": {"number": 1, "prob": 8.281264880397832e-06}, "copying": {"number": 1, "prob": 8.281264880397832e-06}, "seeking": {"number": 1, "prob": 8.281264880397832e-06}, "introduce": {"number": 1, "prob": 8.281264880397832e-06}, "effects": {"number": 1, "prob": 8.281264880397832e-06}, "not": {"number": 1, "prob": 8.281264880397832e-06}, "documented": {"number": 1, "prob": 8.281264880397832e-06}, "now": {"number": 1, "prob": 8.281264880397832e-06}, "discuss": {"number": 1, "prob": 8.281264880397832e-06}, "association": {"number": 1, "prob": 8.281264880397832e-06}, "structural": {"number": 1, "prob": 8.281264880397832e-06}, "identified": {"number": 1, "prob": 8.281264880397832e-06}, "establishing": {"number": 1, "prob": 8.281264880397832e-06}, "found": {"number": 1, "prob": 8.281264880397832e-06}, "identifies": {"number": 1, "prob": 8.281264880397832e-06}, "difficult": {"number": 1, "prob": 8.281264880397832e-06}, "homogeneous": {"number": 1, "prob": 8.281264880397832e-06}, "harm": {"number": 1, "prob": 8.281264880397832e-06}, "interdependence": {"number": 1, "prob": 8.281264880397832e-06}, "principles": {"number": 1, "prob": 8.281264880397832e-06}, "used": {"number": 2, "prob": 1.6562529760795664e-05}, "measurement": {"number": 1, "prob": 8.281264880397832e-06}, "our": {"number": 1, "prob": 8.281264880397832e-06}, "special": {"number": 1, "prob": 8.281264880397832e-06}, "initiatives": {"number": 1, "prob": 8.281264880397832e-06}, "network": {"number": 1, "prob": 8.281264880397832e-06}, "space": {"number": 1, "prob": 8.281264880397832e-06}, "simulation,": {"number": 1, "prob": 8.281264880397832e-06}, "open": {"number": 2, "prob": 1.6562529760795664e-05}, "since": {"number": 2, "prob": 1.6562529760795664e-05}, "integrative": {"number": 1, "prob": 8.281264880397832e-06}, "research": {"number": 5, "prob": 4.140632440198916e-05}, "health": {"number": 1, "prob": 8.281264880397832e-06}, "emerged": {"number": 2, "prob": 1.6562529760795664e-05}, "internet": {"number": 1, "prob": 8.281264880397832e-06}, "evaluation": {"number": 2, "prob": 1.6562529760795664e-05}, "integrated": {"number": 2, "prob": 1.6562529760795664e-05}, "assurance": {"number": 1, "prob": 8.281264880397832e-06}, "theory": {"number": 1, "prob": 8.281264880397832e-06}, "contain": {"number": 1, "prob": 8.281264880397832e-06}, "free": {"number": 1, "prob": 8.281264880397832e-06}, "effect": {"number": 2, "prob": 1.6562529760795664e-05}, "clarify": {"number": 1, "prob": 8.281264880397832e-06}, "statistics": {"number": 2, "prob": 1.6562529760795664e-05}, "members": {"number": 1, "prob": 8.281264880397832e-06}, "productivity,": {"number": 1, "prob": 8.281264880397832e-06}, "teach": {"number": 1, "prob": 8.281264880397832e-06}, "programming": {"number": 1, "prob": 8.281264880397832e-06}, "conducted": {"number": 1, "prob": 8.281264880397832e-06}, "contingency": {"number": 3, "prob": 2.4843794641193497e-05}, "marketplace,": {"number": 1, "prob": 8.281264880397832e-06}, "frequent": {"number": 1, "prob": 8.281264880397832e-06}, "major": {"number": 4, "prob": 3.312505952159133e-05}, "probability": {"number": 1, "prob": 8.281264880397832e-06}, "variables": {"number": 1, "prob": 8.281264880397832e-06}, "coding": {"number": 1, "prob": 8.281264880397832e-06}, "number": {"number": 4, "prob": 3.312505952159133e-05}, "one": {"number": 6, "prob": 4.968758928238699e-05}, "electronic": {"number": 1, "prob": 8.281264880397832e-06}, "given": {"number": 1, "prob": 8.281264880397832e-06}, "management": {"number": 2, "prob": 1.6562529760795664e-05}, "service": {"number": 1, "prob": 8.281264880397832e-06}, "introduction": {"number": 1, "prob": 8.281264880397832e-06}, "system": {"number": 4, "prob": 3.312505952159133e-05}, "their": {"number": 5, "prob": 4.140632440198916e-05}, "teacher": {"number": 1, "prob": 8.281264880397832e-06}, "assumption": {"number": 1, "prob": 8.281264880397832e-06}, "rates": {"number": 1, "prob": 8.281264880397832e-06}, "classroom": {"number": 1, "prob": 8.281264880397832e-06}, "relationship": {"number": 2, "prob": 1.6562529760795664e-05}, "that": {"number": 10, "prob": 8.281264880397832e-05}, "costs,": {"number": 1, "prob": 8.281264880397832e-06}, "released": {"number": 1, "prob": 8.281264880397832e-06}, "part": {"number": 1, "prob": 8.281264880397832e-06}, "decades,": {"number": 2, "prob": 1.6562529760795664e-05}, "somewhat": {"number": 1, "prob": 8.281264880397832e-06}, "norms": {"number": 1, "prob": 8.281264880397832e-06}, "population": {"number": 1, "prob": 8.281264880397832e-06}, "wide": {"number": 1, "prob": 8.281264880397832e-06}, "instruction": {"number": 1, "prob": 8.281264880397832e-06}, "project": {"number": 9, "prob": 7.453138392358049e-05}, "interactive": {"number": 1, "prob": 8.281264880397832e-06}, "and": {"number": 61, "prob": 0.0005051571577042677}, "have": {"number": 6, "prob": 4.968758928238699e-05}, "need": {"number": 1, "prob": 8.281264880397832e-06}, "viewed": {"number": 1, "prob": 8.281264880397832e-06}, "relatively": {"number": 2, "prob": 1.6562529760795664e-05}, "tools,": {"number": 1, "prob": 8.281264880397832e-06}, "agency": {"number": 1, "prob": 8.281264880397832e-06}, "makers": {"number": 1, "prob": 8.281264880397832e-06}, "instance": {"number": 1, "prob": 8.281264880397832e-06}, "take": {"number": 1, "prob": 8.281264880397832e-06}, "which": {"number": 1, "prob": 8.281264880397832e-06}, "performance": {"number": 2, "prob": 1.6562529760795664e-05}, "techniques": {"number": 1, "prob": 8.281264880397832e-06}, "accuracy": {"number": 1, "prob": 8.281264880397832e-06}, "experienced": {"number": 1, "prob": 8.281264880397832e-06}, "multiple": {"number": 2, "prob": 1.6562529760795664e-05}, "though": {"number": 1, "prob": 8.281264880397832e-06}, "collaboration": {"number": 1, "prob": 8.281264880397832e-06}, "who": {"number": 1, "prob": 8.281264880397832e-06}, "metrics": {"number": 1, "prob": 8.281264880397832e-06}, "most": {"number": 3, "prob": 2.4843794641193497e-05}, "eight": {"number": 1, "prob": 8.281264880397832e-06}, "significant": {"number": 2, "prob": 1.6562529760795664e-05}, "organization": {"number": 1, "prob": 8.281264880397832e-06}, "services": {"number": 1, "prob": 8.281264880397832e-06}, "assessed": {"number": 1, "prob": 8.281264880397832e-06}, "probabilistic": {"number": 1, "prob": 8.281264880397832e-06}, "the": {"number": 94, "prob": 0.0007784388987573962}, "especially": {"number": 1, "prob": 8.281264880397832e-06}, "medical": {"number": 1, "prob": 8.281264880397832e-06}, "flow": {"number": 1, "prob": 8.281264880397832e-06}, "face": {"number": 1, "prob": 8.281264880397832e-06}, "duplication": {"number": 1, "prob": 8.281264880397832e-06}, "typically": {"number": 1, "prob": 8.281264880397832e-06}, "notion": {"number": 1, "prob": 8.281264880397832e-06}, "laws": {"number": 1, "prob": 8.281264880397832e-06}, "selection": {"number": 1, "prob": 8.281264880397832e-06}, "agreed": {"number": 1, "prob": 8.281264880397832e-06}, "attempts": {"number": 1, "prob": 8.281264880397832e-06}, "planning": {"number": 1, "prob": 8.281264880397832e-06}, "relation": {"number": 1, "prob": 8.281264880397832e-06}, "networks": {"number": 1, "prob": 8.281264880397832e-06}, "staff": {"number": 1, "prob": 8.281264880397832e-06}, "impact": {"number": 3, "prob": 2.4843794641193497e-05}, "parameters": {"number": 1, "prob": 8.281264880397832e-06}, "proportion": {"number": 1, "prob": 8.281264880397832e-06}, "controls": {"number": 1, "prob": 8.281264880397832e-06}, "should": {"number": 1, "prob": 8.281264880397832e-06}, "employed": {"number": 2, "prob": 1.6562529760795664e-05}, "his": {"number": 1, "prob": 8.281264880397832e-06}, "contracts": {"number": 1, "prob": 8.281264880397832e-06}, "companies,": {"number": 1, "prob": 8.281264880397832e-06}, "despite": {"number": 1, "prob": 8.281264880397832e-06}, "unethical": {"number": 1, "prob": 8.281264880397832e-06}, "areas": {"number": 1, "prob": 8.281264880397832e-06}, "regarding": {"number": 1, "prob": 8.281264880397832e-06}, "determinants": {"number": 1, "prob": 8.281264880397832e-06}, "unauthorized": {"number": 1, "prob": 8.281264880397832e-06}, "approach": {"number": 1, "prob": 8.281264880397832e-06}, "differential": {"number": 1, "prob": 8.281264880397832e-06}, "banking": {"number": 1, "prob": 8.281264880397832e-06}, "investigate": {"number": 2, "prob": 1.6562529760795664e-05}, "experiments": {"number": 1, "prob": 8.281264880397832e-06}, "protocols": {"number": 1, "prob": 8.281264880397832e-06}, "activity": {"number": 2, "prob": 1.6562529760795664e-05}, "release": {"number": 1, "prob": 8.281264880397832e-06}, "where": {"number": 2, "prob": 1.6562529760795664e-05}, "ethical": {"number": 2, "prob": 1.6562529760795664e-05}, "package,": {"number": 1, "prob": 8.281264880397832e-06}, "human": {"number": 1, "prob": 8.281264880397832e-06}, "intelligence": {"number": 1, "prob": 8.281264880397832e-06}, "testing": {"number": 3, "prob": 2.4843794641193497e-05}, "depends": {"number": 1, "prob": 8.281264880397832e-06}, "computer": {"number": 8, "prob": 6.625011904318266e-05}, "are": {"number": 8, "prob": 6.625011904318266e-05}, "concern": {"number": 1, "prob": 8.281264880397832e-06}, "draws": {"number": 1, "prob": 8.281264880397832e-06}, "review": {"number": 2, "prob": 1.6562529760795664e-05}, "currently": {"number": 1, "prob": 8.281264880397832e-06}, "quality": {"number": 4, "prob": 3.312505952159133e-05}, "artificial": {"number": 1, "prob": 8.281264880397832e-06}, "pressures": {"number": 1, "prob": 8.281264880397832e-06}, "written": {"number": 1, "prob": 8.281264880397832e-06}, "difficulties": {"number": 1, "prob": 8.281264880397832e-06}, "years,": {"number": 1, "prob": 8.281264880397832e-06}, "between": {"number": 4, "prob": 3.312505952159133e-05}, "progress": {"number": 1, "prob": 8.281264880397832e-06}, "reading": {"number": 2, "prob": 1.6562529760795664e-05}, "numerous": {"number": 1, "prob": 8.281264880397832e-06}, "across": {"number": 1, "prob": 8.281264880397832e-06}, "available": {"number": 4, "prob": 3.312505952159133e-05}, "we": {"number": 10, "prob": 8.281264880397832e-05}, "infrastructure": {"number": 1, "prob": 8.281264880397832e-06}, "terms": {"number": 2, "prob": 1.6562529760795664e-05}, "creating": {"number": 1, "prob": 8.281264880397832e-06}, "importance": {"number": 1, "prob": 8.281264880397832e-06}, "attention": {"number": 1, "prob": 8.281264880397832e-06}, "tacit": {"number": 1, "prob": 8.281264880397832e-06}, "analyzes": {"number": 1, "prob": 8.281264880397832e-06}, "implementing": {"number": 1, "prob": 8.281264880397832e-06}, "analyzed": {"number": 1, "prob": 8.281264880397832e-06}, "article": {"number": 11, "prob": 9.109391368437615e-05}, "packages": {"number": 2, "prob": 1.6562529760795664e-05}, "distribution": {"number": 1, "prob": 8.281264880397832e-06}, "improve": {"number": 2, "prob": 1.6562529760795664e-05}, "faced": {"number": 1, "prob": 8.281264880397832e-06}, "both": {"number": 4, "prob": 3.312505952159133e-05}, "protect": {"number": 1, "prob": 8.281264880397832e-06}, "last": {"number": 2, "prob": 1.6562529760795664e-05}, "activstats": {"number": 1, "prob": 8.281264880397832e-06}, "many": {"number": 5, "prob": 4.140632440198916e-05}, "legal,": {"number": 1, "prob": 8.281264880397832e-06}, "contract": {"number": 2, "prob": 1.6562529760795664e-05}, "variance": {"number": 2, "prob": 1.6562529760795664e-05}, "estimation": {"number": 3, "prob": 2.4843794641193497e-05}, "traded": {"number": 1, "prob": 8.281264880397832e-06}, "among": {"number": 1, "prob": 8.281264880397832e-06}, "relevant": {"number": 1, "prob": 8.281264880397832e-06}, "characterization": {"number": 2, "prob": 1.6562529760795664e-05}, "appeared": {"number": 1, "prob": 8.281264880397832e-06}, "continuation": {"number": 1, "prob": 8.281264880397832e-06}, "period": {"number": 1, "prob": 8.281264880397832e-06}, "community": {"number": 1, "prob": 8.281264880397832e-06}, "satisfaction": {"number": 2, "prob": 1.6562529760795664e-05}, "learning": {"number": 1, "prob": 8.281264880397832e-06}, "undergraduate": {"number": 1, "prob": 8.281264880397832e-06}, "telecommunications": {"number": 1, "prob": 8.281264880397832e-06}, "considering": {"number": 1, "prob": 8.281264880397832e-06}, "teaches": {"number": 1, "prob": 8.281264880397832e-06}, "three": {"number": 3, "prob": 2.4843794641193497e-05}, "been": {"number": 7, "prob": 5.7968854162784825e-05}, "implicit": {"number": 1, "prob": 8.281264880397832e-06}, "whom": {"number": 1, "prob": 8.281264880397832e-06}, "much": {"number": 2, "prob": 1.6562529760795664e-05}, "growth": {"number": 2, "prob": 1.6562529760795664e-05}, "maintenance": {"number": 4, "prob": 3.312505952159133e-05}, "location": {"number": 1, "prob": 8.281264880397832e-06}, "life": {"number": 1, "prob": 8.281264880397832e-06}, "demand": {"number": 1, "prob": 8.281264880397832e-06}, "an": {"number": 11, "prob": 9.109391368437615e-05}, "present": {"number": 4, "prob": 3.312505952159133e-05}, "case": {"number": 3, "prob": 2.4843794641193497e-05}, "forty": {"number": 1, "prob": 8.281264880397832e-06}, "multi": {"number": 1, "prob": 8.281264880397832e-06}, "resulting": {"number": 1, "prob": 8.281264880397832e-06}, "formalization": {"number": 1, "prob": 8.281264880397832e-06}, "developing": {"number": 3, "prob": 2.4843794641193497e-05}, "examine": {"number": 2, "prob": 1.6562529760795664e-05}, "value": {"number": 2, "prob": 1.6562529760795664e-05}, "technical": {"number": 1, "prob": 8.281264880397832e-06}, "ongoing": {"number": 1, "prob": 8.281264880397832e-06}, "behavior": {"number": 2, "prob": 1.6562529760795664e-05}, "country": {"number": 1, "prob": 8.281264880397832e-06}, "investigating": {"number": 1, "prob": 8.281264880397832e-06}, "property": {"number": 3, "prob": 2.4843794641193497e-05}, "introductory": {"number": 1, "prob": 8.281264880397832e-06}, "examines": {"number": 1, "prob": 8.281264880397832e-06}, "animation,": {"number": 1, "prob": 8.281264880397832e-06}, "is": {"number": 20, "prob": 0.00016562529760795664}, "it": {"number": 1, "prob": 8.281264880397832e-06}, "experience": {"number": 1, "prob": 8.281264880397832e-06}, "in": {"number": 44, "prob": 0.0003643756547375046}, "technology": {"number": 3, "prob": 2.4843794641193497e-05}, "different": {"number": 1, "prob": 8.281264880397832e-06}, "productivity": {"number": 3, "prob": 2.4843794641193497e-05}, "suggests": {"number": 1, "prob": 8.281264880397832e-06}, "spss,": {"number": 1, "prob": 8.281264880397832e-06}, "cross": {"number": 1, "prob": 8.281264880397832e-06}, "same": {"number": 1, "prob": 8.281264880397832e-06}, "complex": {"number": 2, "prob": 1.6562529760795664e-05}, "widely": {"number": 1, "prob": 8.281264880397832e-06}, "survey": {"number": 2, "prob": 1.6562529760795664e-05}, "several": {"number": 1, "prob": 8.281264880397832e-06}, "literature,": {"number": 1, "prob": 8.281264880397832e-06}, "european": {"number": 1, "prob": 8.281264880397832e-06}, "development": {"number": 14, "prob": 0.00011593770832556965}, "independent": {"number": 2, "prob": 1.6562529760795664e-05}, "literature": {"number": 1, "prob": 8.281264880397832e-06}, "assist": {"number": 1, "prob": 8.281264880397832e-06}, "upon": {"number": 1, "prob": 8.281264880397832e-06}, "differing": {"number": 1, "prob": 8.281264880397832e-06}, "user": {"number": 2, "prob": 1.6562529760795664e-05}, "opportunity": {"number": 1, "prob": 8.281264880397832e-06}, "recent": {"number": 3, "prob": 2.4843794641193497e-05}, "audit": {"number": 1, "prob": 8.281264880397832e-06}, "task": {"number": 2, "prob": 1.6562529760795664e-05}, "database": {"number": 1, "prob": 8.281264880397832e-06}, "i": {"number": 1, "prob": 8.281264880397832e-06}, "no": {"number": 1, "prob": 8.281264880397832e-06}, "well": {"number": 3, "prob": 2.4843794641193497e-05}, "analysis": {"number": 4, "prob": 3.312505952159133e-05}, "costs": {"number": 1, "prob": 8.281264880397832e-06}, "regulating": {"number": 1, "prob": 8.281264880397832e-06}, "forms,": {"number": 1, "prob": 8.281264880397832e-06}, "components": {"number": 1, "prob": 8.281264880397832e-06}, "sets": {"number": 1, "prob": 8.281264880397832e-06}, "claims": {"number": 1, "prob": 8.281264880397832e-06}, "model": {"number": 7, "prob": 5.7968854162784825e-05}, "drawing": {"number": 1, "prob": 8.281264880397832e-06}, "opinions": {"number": 1, "prob": 8.281264880397832e-06}, "increasingly": {"number": 2, "prob": 1.6562529760795664e-05}, "generally": {"number": 1, "prob": 8.281264880397832e-06}, "accurate": {"number": 1, "prob": 8.281264880397832e-06}, "reviewed": {"number": 1, "prob": 8.281264880397832e-06}, "proposes": {"number": 1, "prob": 8.281264880397832e-06}, "identify": {"number": 1, "prob": 8.281264880397832e-06}, "plagued": {"number": 1, "prob": 8.281264880397832e-06}, "questions": {"number": 1, "prob": 8.281264880397832e-06}, "commonly": {"number": 1, "prob": 8.281264880397832e-06}, "coordination": {"number": 1, "prob": 8.281264880397832e-06}, "alignment": {"number": 1, "prob": 8.281264880397832e-06}, "discipline": {"number": 1, "prob": 8.281264880397832e-06}, "web": {"number": 1, "prob": 8.281264880397832e-06}, "characteristics,": {"number": 1, "prob": 8.281264880397832e-06}, "improvement": {"number": 3, "prob": 2.4843794641193497e-05}, "source": {"number": 2, "prob": 1.6562529760795664e-05}, "add": {"number": 1, "prob": 8.281264880397832e-06}, "quality,": {"number": 1, "prob": 8.281264880397832e-06}, "usage": {"number": 1, "prob": 8.281264880397832e-06}, "has": {"number": 10, "prob": 8.281264880397832e-05}, "vendor": {"number": 1, "prob": 8.281264880397832e-06}, "reuse": {"number": 1, "prob": 8.281264880397832e-06}, "demands": {"number": 1, "prob": 8.281264880397832e-06}, "process,": {"number": 1, "prob": 8.281264880397832e-06}, "income": {"number": 1, "prob": 8.281264880397832e-06}, "early": {"number": 2, "prob": 1.6562529760795664e-05}, "cultural": {"number": 1, "prob": 8.281264880397832e-06}, "five": {"number": 1, "prob": 8.281264880397832e-06}, "using": {"number": 4, "prob": 3.312505952159133e-05}, "designers": {"number": 1, "prob": 8.281264880397832e-06}, "projects": {"number": 2, "prob": 1.6562529760795664e-05}, "reusability": {"number": 1, "prob": 8.281264880397832e-06}, "effectiveness": {"number": 1, "prob": 8.281264880397832e-06}, "cognitive": {"number": 1, "prob": 8.281264880397832e-06}, "lost": {"number": 1, "prob": 8.281264880397832e-06}, "collective": {"number": 2, "prob": 1.6562529760795664e-05}, "facing": {"number": 1, "prob": 8.281264880397832e-06}, "become": {"number": 1, "prob": 8.281264880397832e-06}, "methods": {"number": 2, "prob": 1.6562529760795664e-05}, "classical": {"number": 1, "prob": 8.281264880397832e-06}, "phenomena": {"number": 1, "prob": 8.281264880397832e-06}, "competition": {"number": 1, "prob": 8.281264880397832e-06}, "towards": {"number": 1, "prob": 8.281264880397832e-06}, "past,": {"number": 1, "prob": 8.281264880397832e-06}, "specific": {"number": 1, "prob": 8.281264880397832e-06}, "describing": {"number": 1, "prob": 8.281264880397832e-06}, "for": {"number": 19, "prob": 0.0001573440327275588}, "decision": {"number": 1, "prob": 8.281264880397832e-06}, "legal": {"number": 1, "prob": 8.281264880397832e-06}, "students": {"number": 3, "prob": 2.4843794641193497e-05}, "critical": {"number": 1, "prob": 8.281264880397832e-06}, "select": {"number": 1, "prob": 8.281264880397832e-06}, "innovation": {"number": 2, "prob": 1.6562529760795664e-05}, "be": {"number": 4, "prob": 3.312505952159133e-05}, "power": {"number": 1, "prob": 8.281264880397832e-06}, "schedule": {"number": 2, "prob": 1.6562529760795664e-05}, "problems": {"number": 4, "prob": 3.312505952159133e-05}, "production,": {"number": 1, "prob": 8.281264880397832e-06}, "confidence": {"number": 1, "prob": 8.281264880397832e-06}, "ideological,": {"number": 1, "prob": 8.281264880397832e-06}, "although": {"number": 2, "prob": 1.6562529760795664e-05}, "output": {"number": 1, "prob": 8.281264880397832e-06}, "hierarchically": {"number": 1, "prob": 8.281264880397832e-06}, "analyses": {"number": 1, "prob": 8.281264880397832e-06}, "by": {"number": 5, "prob": 4.140632440198916e-05}, "stage": {"number": 1, "prob": 8.281264880397832e-06}, "on": {"number": 9, "prob": 7.453138392358049e-05}, "goods": {"number": 1, "prob": 8.281264880397832e-06}, "consumption": {"number": 1, "prob": 8.281264880397832e-06}, "package": {"number": 1, "prob": 8.281264880397832e-06}, "of": {"number": 87, "prob": 0.0007204700445946114}, "industry": {"number": 4, "prob": 3.312505952159133e-05}, "simulation": {"number": 1, "prob": 8.281264880397832e-06}, "practical": {"number": 1, "prob": 8.281264880397832e-06}, "discusses": {"number": 2, "prob": 1.6562529760795664e-05}, "or": {"number": 4, "prob": 3.312505952159133e-05}, "software": {"number": 88, "prob": 0.0007287513094750092}, "own": {"number": 1, "prob": 8.281264880397832e-06}, "managers": {"number": 1, "prob": 8.281264880397832e-06}, "previously": {"number": 1, "prob": 8.281264880397832e-06}, "communication": {"number": 1, "prob": 8.281264880397832e-06}, "functional": {"number": 1, "prob": 8.281264880397832e-06}, "intellectual": {"number": 3, "prob": 2.4843794641193497e-05}, "due": {"number": 1, "prob": 8.281264880397832e-06}, "down": {"number": 1, "prob": 8.281264880397832e-06}, "determine": {"number": 1, "prob": 8.281264880397832e-06}, "narration": {"number": 1, "prob": 8.281264880397832e-06}, "often": {"number": 2, "prob": 1.6562529760795664e-05}, "logics": {"number": 1, "prob": 8.281264880397832e-06}, "there": {"number": 2, "prob": 1.6562529760795664e-05}, "long": {"number": 1, "prob": 8.281264880397832e-06}, "custom": {"number": 1, "prob": 8.281264880397832e-06}, "systems,": {"number": 1, "prob": 8.281264880397832e-06}, "describes": {"number": 5, "prob": 4.140632440198916e-05}, "way": {"number": 2, "prob": 1.6562529760795664e-05}, "editions": {"number": 1, "prob": 8.281264880397832e-06}, "analyze": {"number": 1, "prob": 8.281264880397832e-06}, "was": {"number": 1, "prob": 8.281264880397832e-06}, "function": {"number": 1, "prob": 8.281264880397832e-06}, "delivery": {"number": 2, "prob": 1.6562529760795664e-05}, "failure": {"number": 2, "prob": 1.6562529760795664e-05}, "library": {"number": 1, "prob": 8.281264880397832e-06}, "with": {"number": 4, "prob": 3.312505952159133e-05}, "economic": {"number": 2, "prob": 1.6562529760795664e-05}, "problem": {"number": 5, "prob": 4.140632440198916e-05}, "stages": {"number": 1, "prob": 8.281264880397832e-06}, "called": {"number": 3, "prob": 2.4843794641193497e-05}, "marketplace": {"number": 1, "prob": 8.281264880397832e-06}, "associated": {"number": 1, "prob": 8.281264880397832e-06}, "computing": {"number": 2, "prob": 1.6562529760795664e-05}, "curve": {"number": 1, "prob": 8.281264880397832e-06}, "describe": {"number": 2, "prob": 1.6562529760795664e-05}, "inequality,": {"number": 1, "prob": 8.281264880397832e-06}, "general": {"number": 2, "prob": 1.6562529760795664e-05}, "engineering": {"number": 3, "prob": 2.4843794641193497e-05}, "reliability": {"number": 2, "prob": 1.6562529760795664e-05}, "expertise": {"number": 1, "prob": 8.281264880397832e-06}, "at": {"number": 1, "prob": 8.281264880397832e-06}, "formulation": {"number": 1, "prob": 8.281264880397832e-06}, "organizational": {"number": 4, "prob": 3.312505952159133e-05}, "education": {"number": 1, "prob": 8.281264880397832e-06}, "as": {"number": 13, "prob": 0.00010765644344517182}, "defines": {"number": 1, "prob": 8.281264880397832e-06}, "goals": {"number": 1, "prob": 8.281264880397832e-06}, "variety": {"number": 1, "prob": 8.281264880397832e-06}, "piracy": {"number": 6, "prob": 4.968758928238699e-05}, "fixing": {"number": 1, "prob": 8.281264880397832e-06}, "when": {"number": 1, "prob": 8.281264880397832e-06}, "application": {"number": 3, "prob": 2.4843794641193497e-05}, "other": {"number": 2, "prob": 1.6562529760795664e-05}, "compares": {"number": 2, "prob": 1.6562529760795664e-05}, "digital": {"number": 1, "prob": 8.281264880397832e-06}, "developers": {"number": 1, "prob": 8.281264880397832e-06}, "outlines": {"number": 1, "prob": 8.281264880397832e-06}, "distribution,": {"number": 1, "prob": 8.281264880397832e-06}, "users": {"number": 2, "prob": 1.6562529760795664e-05}, "models": {"number": 3, "prob": 2.4843794641193497e-05}, "uniformly": {"number": 1, "prob": 8.281264880397832e-06}, "develops": {"number": 2, "prob": 1.6562529760795664e-05}, "important": {"number": 1, "prob": 8.281264880397832e-06}, "variable": {"number": 1, "prob": 8.281264880397832e-06}, "video,": {"number": 1, "prob": 8.281264880397832e-06}, "building": {"number": 1, "prob": 8.281264880397832e-06}, "methodologies": {"number": 1, "prob": 8.281264880397832e-06}, "lead": {"number": 1, "prob": 8.281264880397832e-06}, "prevalent": {"number": 1, "prob": 8.281264880397832e-06}, "consumer": {"number": 1, "prob": 8.281264880397832e-06}, "factors": {"number": 1, "prob": 8.281264880397832e-06}, "modules": {"number": 1, "prob": 8.281264880397832e-06}, "investigated": {"number": 1, "prob": 8.281264880397832e-06}, "compete": {"number": 1, "prob": 8.281264880397832e-06}, "time": {"number": 5, "prob": 4.140632440198916e-05}, "serious": {"number": 2, "prob": 1.6562529760795664e-05}, "requires": {"number": 1, "prob": 8.281264880397832e-06}, "profits": {"number": 1, "prob": 8.281264880397832e-06}}}